rm(list=ls())
library(phyloseq)
library(DESeq2)
library(plyr)
library(ecodist)
library(ade4)
library(vegan)
library(permute)
library(lattice)
library(reshape2)
library(dplyr)
library(Hmisc)
library(RColorBrewer)
library(ggplot2)
library(colorspace)
library(randomForest)
setwd("/Users/fmazel/Desktop/Recherche/En_cours/Analyses_en_cours/Afribiota/astCodeVersion/") # put here your path to the working directory
otu=read.table(file="Additional data table S15 otutable.txt", header=TRUE, sep = "\t", row.names=1, dec = ".")
otu=as.matrix(otu)
class(otu)
otu = otu_table(otu, taxa_are_rows = TRUE)
dim(otu) # control dimensions
tax=read.table(file="Additional data table S16 taxtable.txt", header=TRUE, sep = "\t", row.names=1, dec = ".")
tax=as.matrix(tax)
tax=tax_table(tax)
dim(tax) # control dimensions
physeq = phyloseq(otu, tax)
map= read.table(file="Additional data table S17 sampledata.txt", header=TRUE, sep = "\t", row.names=1, dec = ".")
map =sample_data(map)
dim(map) # control dimensions
sample_names(map) # check names and if they are the same
sample_names(physeq)
sample_names(map) <- gsub('[.]', '-', sample_names(map)) # to have the same samplenames in biom file and in metadata
df <- merge_phyloseq(map,physeq)
df
df = prune_taxa(taxa_sums(df) > 1, df)
parse_taxonomy_simple = function(char.vec) {
ranks = c("Domain", "Phylum", "Class", "Order", "Family", "Genus",
"Species", "Strain")
rv = strsplit(char.vec, ";")[[1]]
rv = c(rv, rep(NA, length(ranks) - length(rv)))
names(rv) = ranks
rv
}
colnames(tax_table(df))
colnames(tax_table(df)) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
colnames(tax_table(df))
dffiltered <- df %>%
subset_taxa(Family != "__Mitochondria") %>%
subset_taxa(Class != "__Chloroplast") %>%
subset_taxa(Genus != "__Trichuris") %>%
subset_taxa(Genus != "__Diabrotica") %>%
subset_taxa(Genus != "__Camelus")
dffiltered
which(sample_data(dffiltered)$sampletype == "Duodenal ")
sample_data(dffiltered)$sampletype[which(sample_data(dffiltered)$sampletype == "Duodenal ")] <- "Duodenal"
which(sample_data(dffiltered)$nutstatus == "NN ")
sample_data(dffiltered)$nutstatus[which(sample_data(dffiltered)$nutstatus == "NN ")] <- "NN"
sample_data(dffiltered)
which(sample_data(dffiltered)$ageyears == "5")
sample_data(dffiltered)$ageyears[which(sample_data(dffiltered)$ageyears == "5")] <- "4"
sample_data(dffiltered)$ageyears[which(sample_data(dffiltered)$ageyears == "4")] <- "4+"
dffiltered2 <- dffiltered %>%
subset_samples(duplicate=="no" & recruitmentsource!="Hospital") # to filter out samples which are not recruited in the community
dffiltered
dffiltered2
dffilteredcorrgastduod <- dffiltered2 %>%
subset_samples((sampletype == "Feces") | (sampletype == "Duodenal" & ph_in_range=="yes") | (sampletype == "Gastric" & ph_in_range=="yes")) # to keep only samples with good pH range (<=4 for gastric, >=5 for duodenal))
sample_data(dffilteredcorrgastduod)
dffilteredcorrgastduod
tax=tax_table(dffilteredcorrgastduod)
otu=otu_table(dffilteredcorrgastduod)
sample=sample_data(dffilteredcorrgastduod)
dffilteredcorrgastduodmalnonly <- dffiltered2 %>%
subset_samples(stunted=="stunted" & (sampletype == "Feces") | (sampletype == "Duodenal" & ph_in_range=="yes") | (sampletype == "Gastric" & ph_in_range=="yes"))
sample_data(dffilteredcorrgastduodmalnonly)
dffilteredcorrgastduodmalnonly
dffilteredfeces <- dffiltered2 %>%
subset_samples(sampletype == "Feces")
sample_data(dffilteredfeces)
dffilteredfeces
dffilteredmalnonly <- dffiltered2 %>%
subset_samples(sampletype == "Feces" & stunted=="stunted")
sample_data(dffilteredmalnonly)
dffilteredmalnonly
dffilteredfecesBangui <- dffilteredfeces %>%
subset_samples(country == "CAR")
sample_data(dffilteredfecesBangui)
dffilteredfecesBangui
dffilteredfecesMada <- dffilteredfeces %>%
subset_samples(country == "Madagascar")
sample_data(dffilteredfecesMada)
dffilteredfecesMada
dffilteredfeces2to3 <- dffilteredfeces %>%
subset_samples(ageyears == "2")
sample_data(dffilteredfeces2to3)
dffilteredfeces2to3
dffilteredfeces3to4 <- dffilteredfeces %>%
subset_samples(ageyears == "3")
sample_data(dffilteredfeces3to4)
dffilteredfeces3to4
dffilteredfeces4to5 <- dffilteredfeces %>%
subset_samples(ageyears == "4+")
sample_data(dffilteredfeces4to5)
dffilteredfeces4to5
dffilteredduodenal <- dffiltered2 %>%
subset_samples(sampletype == "Duodenal" & ph_in_range=="yes") # only keep samples with pH>=5
sample_data(dffilteredduodenal)
dffilteredduodenal
dffilteredduodenalBangui <- dffiltered2 %>%
subset_samples(sampletype == "Duodenal" & ph_in_range=="yes" & country=="CAR") # only keep samples with pH>=5
dffilteredduodenalBangui
dffilteredgastric <- dffiltered2 %>%
subset_samples(sampletype == "Gastric" & ph_in_range=="yes") # only keep samples with pH>=5
sample_data(dffilteredgastric)
dffilteredgastric
dffilteredgastricduodenal <- dffiltered2 %>%
subset_samples((sampletype == "Gastric" & ph_in_range=="yes") | (sampletype == "Duodenal" & ph_in_range=="yes")) # only keep samples with pH>=5
sample_data(dffilteredgastricduodenal)
dffilteredgastricduodenal
dffilteredgastroduodBangui<- dffiltered2 %>%
subset_samples((country=="CAR") & ((sampletype == "Gastric" & ph_in_range=="yes") | (sampletype == "Duodenal" & ph_in_range=="yes"))) # only keep samples with pH>=5
sample_data(dffilteredgastroduodBangui)
dffilteredgastroduodBangui
OTU_table=t(read.csv("dfrar10000otu.csv",header = T,row.names = 1))
table(apply(OTU_table,1,sum)) #verify rarefaction
Meta=read.csv("dfrar10000metadata.csv",header = T,row.names = 1)
Meta$sampleid=rownames(Meta)
taxo=read.csv("dfrar10000tax.csv",header = T,row.names = 1)
rownames(taxo)=paste("a.",row.names(taxo),sep="")
NTREE=1000 # Number of Trees
NbVar=1000 # Number of variables tested at each split
FecesSamples=as.character(Meta[Meta$sampletype=="Feces","sampleid"])
Feces_OTU_table=OTU_table[FecesSamples,]
Stunting_Feces=Meta[FecesSamples,"stunted"];names(Stunting_Feces)=FecesSamples
table(Stunting_Feces)
whole_feces_pred=data.frame(country=Meta[FecesSamples,"country"],gender=Meta[FecesSamples,"gender"],agemonths=Meta[FecesSamples,"agemonths"],a=Feces_OTU_table)
RF_model_Feces_all=randomForest(y=Stunting_Feces,sampsize=c(143,143),strata=Stunting_Feces,x=whole_feces_pred,importance = T,proximity = T,ntree = NTREE,mtry = NbVar)
print(RF_model_Feces_all)
imp=data.frame(importance(RF_model_Feces_all))
imp$genus=as.character(taxo[rownames(imp),"Genus"])
Best=imp[imp$MeanDecreaseAccuracy>quantile(x = imp$MeanDecreaseAccuracy,.95),]
bymedian <- with(Best, reorder(genus, -MeanDecreaseAccuracy, median))
bymedian
pdf(width = 20,height = 10,file=paste(pathforplots,"Variable_Importance_Feces_BothCountry_raref.pdf",sep=""))
par(mar=c(15,5,1,1))
boxplot(Best$MeanDecreaseAccuracy ~ bymedian, data = Best,
xlab = "", ylab = "Variable Importance",
main = paste("Feces in Both Countries; Error Rate=",round(RF_model_Feces_all$err.rate[NTREE,"OOB"],3),sep=""), varwidth = TRUE,
col = "lightgray",las=2)
pathforplots=getwd()
pdf(width = 20,height = 10,file=paste(pathforplots,"Variable_Importance_Feces_BothCountry_raref.pdf",sep=""))
par(mar=c(15,5,1,1))
boxplot(Best$MeanDecreaseAccuracy ~ bymedian, data = Best,
xlab = "", ylab = "Variable Importance",
main = paste("Feces in Both Countries; Error Rate=",round(RF_model_Feces_all$err.rate[NTREE,"OOB"],3),sep=""), varwidth = TRUE,
col = "lightgray",las=2)
dev.off()
# 2. In CAR
i="CAR"
#Subset of data
FecesSamplesCAR=as.character(Meta[(Meta$sampletype=="Feces")&(Meta$country==i),"sampleid"])
Feces_OTU_tableCAR=OTU_table[FecesSamplesCAR,]
Feces_OTU_tableCAR=Feces_OTU_tableCAR[,apply(Feces_OTU_tableCAR,2,sum)>0]#only keep OTUs that are present at least once
Stunting_FecesCAR=Meta[FecesSamplesCAR,"stunted"];names(Stunting_FecesCAR)=FecesSamplesCAR
table(Stunting_FecesCAR)
#Model with microbiome, age, country, gender
whole_feces_predCAR=data.frame(country=Meta[FecesSamplesCAR,"country"],gender=Meta[FecesSamplesCAR,"gender"],agemonths=Meta[FecesSamplesCAR,"agemonths"],a=Feces_OTU_tableCAR)
RF_model_Feces_CAR=randomForest(y=Stunting_FecesCAR,x=whole_feces_predCAR,sampsize=c(69,69),strata = Stunting_FecesCAR,importance = T,proximity = T,ntree = NTREE,mtry = NbVar)
print(RF_model_Feces_CAR)
#plot summary using the 5% most important OTUs ERROR AGAIN ON LAST LINE
imp=data.frame(importance(RF_model_Feces_CAR))
imp$genus=as.character(taxo[rownames(imp),"Genus"])
Best=imp[imp$MeanDecreaseAccuracy>quantile(x = imp$MeanDecreaseAccuracy,.95),]
bymedian <- with(Best, reorder(genus, -MeanDecreaseAccuracy, median))
pdf(width = 20,height = 10,file=paste(pathforplots,"Variable_Importance_Feces_raref_",i,".pdf",sep=""))
par(mar=c(18,5,1,1))
boxplot(Best$MeanDecreaseAccuracy ~ bymedian, data = Best,
xlab = "", ylab = "Variable Importance",
main = paste("Feces_",i,"; Error Rate=",round(RF_model_Feces_CAR$err.rate[NTREE,"OOB"],3),sep=""), varwidth = TRUE,
col = "lightgray",las=2)
dev.off()
# 3. in MADAGASCAR
i='Madagascar'
#Subset of data
FecesSamplesMada=as.character(Meta[(Meta$sampletype=="Feces")&(Meta$country==i),"sampleid"])
Feces_OTU_tableMada=OTU_table[FecesSamplesMada,]
Feces_OTU_tableMada=Feces_OTU_tableMada[,apply(Feces_OTU_tableMada,2,sum)>0]#only keep OTUs that are present at least once
Stunting_FecesMada=Meta[FecesSamplesMada,"stunted"];names(Stunting_FecesMada)=FecesSamplesMada
table(Stunting_FecesMada)
#Model with microbiome, age, country, gender
Mada_feces_pred=data.frame(country=Meta[FecesSamplesMada,"country"],gender=Meta[FecesSamplesMada,"gender"],agemonths=Meta[FecesSamplesMada,"agemonths"],a=Feces_OTU_tableMada)
RF_model_Feces_Mada=randomForest(y=Stunting_FecesMada,x=Mada_feces_pred,sampsize=c(57,57),strata = Stunting_FecesMada,importance = T,proximity = T,ntree = NTREE,mtry = NbVar)
print(RF_model_Feces_Mada)
#plot summary using the 5% most important OTUs
imp=data.frame(importance(RF_model_Feces_Mada))
imp$genus=as.character(taxo[rownames(imp),"Genus"])
Best=imp[imp$MeanDecreaseAccuracy>quantile(x = imp$MeanDecreaseAccuracy,.95),]
bymedian <- with(Best, reorder(genus, -MeanDecreaseAccuracy, median))
pdf(width = 20,height = 10,file=paste(pathforplots,"Variable_Importance_Feces_raref",i,".pdf",sep=""))
par(mar=c(18,5,1,1))
boxplot(Best$MeanDecreaseAccuracy ~ bymedian, data = Best,
xlab = "", ylab = "Variable Importance",
main = paste("Feces_",i,"; Error Rate=",round(RF_model_Feces_Mada$err.rate[NTREE,"OOB"],3),sep=""), varwidth = TRUE,
col = "lightgray",las=2)
dev.off()
#### 4. DUODENUM ONLY ####
#Subset of data
DuoSamples=as.character(Meta[Meta$sampletype=="Duodenal","sampleid"])
Duo_OTU_table=OTU_table[DuoSamples,]
Duo_OTU_table=Duo_OTU_table[,apply(Duo_OTU_table,2,sum)>0]#only keep OTUs that are present at least once
Stunting_Duo=factor(Meta[DuoSamples,"nutstatus"]);names(Stunting_Duo)=DuoSamples
table(Meta[DuoSamples,"nutstatus"])
#Model with microbiome, age, country, gender
whole_Duo_pred=data.frame(country=Meta[DuoSamples,"country"],gender=Meta[DuoSamples,"gender"],agemonths=Meta[DuoSamples,"agemonths"],a=Duo_OTU_table)
RF_model_Duo_all=randomForest(y=Stunting_Duo,x=whole_Duo_pred,importance = T,proximity = T,ntree = NTREE,mtry = NbVar)
print(RF_model_Duo_all)
#plot summary using the 5% most important OTUs
imp=data.frame(importance(RF_model_Duo_all))
imp$genus=as.character(taxo[rownames(imp),"Genus"])
Best=imp[imp$MeanDecreaseAccuracy>quantile(x = imp$MeanDecreaseAccuracy,.95),]
bymedian <- with(Best, reorder(genus, -MeanDecreaseAccuracy, median))
pdf(width = 20,height = 10,file=paste(pathforplots,"Variable_Importance_Duodenal_BothCountry_Raref.pdf",sep=""))
par(mar=c(18,5,1,1))
boxplot(Best$MeanDecreaseAccuracy ~ bymedian, data = Best,
xlab = "", ylab = "Variable Importance",
main = paste("Duodenum_MS_MM; Error Rate=",round(RF_model_Duo_all$err.rate[NTREE,"OOB"],3),sep=""), varwidth = TRUE,col = "lightgray",las=2)
dev.off()
#### DUODENUM ONLY ####
#Subset of data
FecesSamples=as.character(Meta[Meta$sampletype=="Duodenal","sampleid"])
Feces_OTU_table=OTU_table[FecesSamples,]
Stunting_Feces=factor(Meta[FecesSamples,"nutstatus"]);names(Stunting_Feces)=FecesSamples
table(Meta[FecesSamples,"nutstatus"])
#Model with microbiome, age, country, gender
whole_feces_pred=data.frame(country=Meta[FecesSamples,"country"],gender=Meta[FecesSamples,"gender"],agemonths=Meta[FecesSamples,"agemonths"],a=Feces_OTU_table)
RF_model_Feces_all=randomForest(y=Stunting_Feces,x=whole_feces_pred,importance = T,proximity = T,ntree = NTREE)
print(RF_model_Feces_all)
#plot summary using the 5% most important OTUs
imp=data.frame(importance(RF_model_Feces_all))
imp$genus=as.character(taxo[rownames(imp),"Genus"])
Best=imp[imp$MeanDecreaseAccuracy>quantile(x = imp$MeanDecreaseAccuracy,.95),]
bymedian <- with(Best, reorder(genus, -MeanDecreaseAccuracy, median))
pdf(width = 20,height = 10,file=paste(pathforplots,"Variable_Importance_Duodenal_BothCountry.pdf",sep=""))
par(mar=c(15,5,1,1))
boxplot(Best$MeanDecreaseAccuracy ~ bymedian, data = Best,
xlab = "", ylab = "Variable Importance",
main = "Duodenum_MS_MM", varwidth = TRUE,
col = "lightgray",las=2)
dev.off()
setwd("/Users/fmazel/Documents/GitHub/Microbiome_Phylo_Diversity_Workshop")
Tree=read.tree('My_outputs_BackUp/Saanish_FastTree')
library(ape)
Tree=read.tree('My_outputs_BackUp/Saanish_FastTree')
taxonomy.raw = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy= taxonomy.raw %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
library(seqinr)
library(ape)
library(vegan)
library(tidyverse)
library(phyloseq)
library(betapart)
library(abind)
library(tidyr)
library(Matrix)
library(cowplot)
library(phylofactor)
taxonomy.raw = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy= taxonomy.raw %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
Domains=unique(taxonomy$Domain)
paletteDomains=rainbow(length(Domains));names(paletteDomains)=Domains
coloursDomains=paletteDomains[as.character(taxonomy$Domain)];names(coloursDomains)=rownames(taxonomy)
Archaea=row.names(taxonomy)[taxonomy$Domain=="Archaea"]
MRCAnode=getMRCA(phy = Tree,tip = Archaea)
TreeNewRoot=root(phy=Tree, node=MRCAnode,resolve.root = T)
write.tree(TreeNewRoot,'My_outputs_BackUp/Saanish_FastTreeRooted')
pdf("My_outputs_BackUp/Phylogenetic_tree_colouredby_Domains_NewRoot.pdf",width=15,height=15)
plot(TreeNewRoot,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
legend(1, 0, legend=names(paletteDomains),fill=paletteDomains, cex=2)
dev.off()
pdf("My_outputs_BackUp/Phylogenetic_tree_colouredby_Domains.pdf",width=15,height=15)
plot(Tree,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
legend(1, 0, legend=names(paletteDomains),fill=paletteDomains, cex=2)
dev.off()
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
library(seqinr)
library(ape)
library(vegan)
library(tidyverse)
library(phyloseq)
library(betapart)
library(abind)
library(tidyr)
library(Matrix)
library(cowplot)
library(phylofactor)
devtools::install_github('reptalex/phylofactor')
source("https://bioconductor.org/biocLite.R")
biocLite('phyloseq')
library(phylofactor)
biocLite("ggtree")
biocLite("Biostrings")
devtools::install_github('reptalex/phylofactor')
#' ### Load the packages
#'
## ---- message=FALSE------------------------------------------------------
library(seqinr)
library(ape)
library(vegan)
library(tidyverse)
library(phyloseq)
library(betapart)
library(abind)
library(tidyr)
library(Matrix)
library(ggplot2)
library(cowplot)
library(phylofactor)
library(phylofactor)
install.packages(c("ade4", "adegenet", "ape", "bigmemory", "bindrcpp", "callr", "castor", "classInt", "cluster", "cubature", "curl", "data.table", "deldir", "deSolve", "digest", "dotCall64", "dplyr", "fields", "foreign", "GenSA", "ggrepel", "haven", "hexbin", "httpuv", "igraph", "irlba", "kernlab", "later", "lme4", "lubridate", "maps", "MASS", "Matrix", "matrixStats", "mgcv", "modelr", "msm", "mvtnorm", "NMF", "openssl", "openxlsx", "phangorn", "picante", "processx", "purrr", "quantreg", "randomForest", "Rcpp", "RcppEigen", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "Rmpfr", "robustbase", "rpart", "sf", "sourcetools", "sp", "spam", "spdep", "subplex", "survival", "tibble", "tidyr", "tidyselect", "units", "urltools", "utf8", "vegan", "XML", "xml2", "yaml", "zoo"))
install.packages(c("ade4", "adegenet", "ape", "bigmemory", "bindrcpp", "callr", "castor", "classInt", "cluster", "cubature", "curl", "data.table", "deldir", "deSolve", "digest", "dotCall64", "dplyr", "fields", "foreign", "GenSA", "ggrepel", "haven", "hexbin", "httpuv", "igraph", "irlba", "kernlab", "later", "lme4", "lubridate", "maps", "MASS", "Matrix", "matrixStats", "mgcv", "modelr", "msm", "mvtnorm", "NMF", "openssl", "openxlsx", "phangorn", "picante", "processx", "purrr", "quantreg", "randomForest", "Rcpp", "RcppEigen", "readxl", "rgdal", "rgeos", "rJava", "rjson", "rlang", "Rmpfr", "robustbase", "rpart", "sf", "sourcetools", "sp", "spam", "spdep", "subplex", "survival", "tibble", "tidyr", "tidyselect", "units", "urltools", "utf8", "vegan", "XML", "xml2", "yaml", "zoo"))
