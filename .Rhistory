a=lapply(similarity_slices,getBDTT,tree=tree,sampleOTUs=sampleOTUs,onlyBeta=T)
similarity_slices=slices
a=lapply(similarity_slices,getBDTT,tree=tree,sampleOTUs=sampleOTUs,onlyBeta=T)
tree=Tree,sampleOTUs=t(as(otu_table(mothur), "matrix"))
tree=Tree
sampleOTUs=t(as(otu_table(mothur), "matrix"))
a=lapply(similarity_slices,getBDTT,tree=tree,sampleOTUs=sampleOTUs,onlyBeta=T)
a
do.call(function(...){abind(...,along=1)},lapply(similarity_slices,getBDTT,tree=tree,sampleOTUs=sampleOTUs,onlyBeta=T))
do.call(function(...){abind(...,along=1)},a)
names(a)=similarity_slices
a
do.call(function(...){abind(...,along=1)},a)
do.call(function(...){abind(...,along=0)},a)
# BDTT for non-ultrametric trees
#library(phytools)
library(betapart)
library(abind)
library(Matrix)
BDTT=function(similarity_slices,tree,sampleOTUs,onlyBeta=T){
Betas=lapply(similarity_slices,getBDTT,tree=tree,sampleOTUs=sampleOTUs,onlyBeta=T)
names(Betas)=similarity_slices
res=do.call(function(...){abind(...,along=0)},Betas)
return(res)
}
getBDTT=function(similarity,tree,sampleOTUs,onlyBeta=T,metric=c("jac"))
{
New_OTUs_sample_matrix=getNew_OTUs_sample_matrix(similarity=similarity,sampleOTUs=sampleOTUs,tree=tree)
BetasPA=getBeta(t(New_OTUs_sample_matrix[[1]]),ab=F)[c("jtu","jac"),,]
#rownames(BetasPA)=paste(rownames(BetasPA),"_Simi_",similarity,sep="")
BetasAb=getBeta(t(New_OTUs_sample_matrix[[1]]),ab=T)[c("bctu","bc"),,]
#rownames(BetasAb)=paste(rownames(BetasAb),"_Simi_",similarity,sep="")
AllBetas=abind(BetasPA,BetasAb,along = 1)
AllBetas=BetasPA[metric,,]
if (onlyBeta==T){res=list(Beta_Div=AllBetas,NewOTU_table=New_OTUs_sample_matrix[[1]],New_to_old_OTUs=New_OTUs_sample_matrix[[2]])}
if (onlyBeta==T){res=AllBetas}
return(res)
}
getBeta=function(mat,ab=F)
{
if (ab==T)
{
h=bray.part(data.frame(mat))
bctu=as.matrix(h[[1]])
bcne=as.matrix(h[[2]])
bc=as.matrix(h[[3]])
res=abind(bctu,bcne,bc,along=0)
dimnames(res)[[1]]=c("bctu","bcne","bc")
}
if (ab==F)
{
mat[mat>0]=1
h=beta.pair(data.frame(mat), index.family="jaccard")
hh=beta.pair(data.frame(mat), index.family="sorensen")
jtu=as.matrix(h[[1]])
jne=as.matrix(h[[2]])
jac=as.matrix(h[[3]])
stu=as.matrix(hh[[1]])
sne=as.matrix(hh[[2]])
sor=as.matrix(hh[[3]])
res=abind(jtu,jne,jac,stu,sne,sor,along=0)
dimnames(res)[[1]]=c("jtu","jne","jac","stu","sne","sor")
}
return(res)
}
getNew_OTUs_sample_matrix=function(similarity,sampleOTUs,tree)
{
CorresMatrix=New_toOld_OTUs(similarity=similarity,tree=tree)
sample=Matrix(t(sampleOTUs))
sp=colnames(sample)
Newsample=t(sample[,sp] %*% CorresMatrix[sp,])
out=list(NewSample=as.matrix(Newsample),CorrepondanceOTUs=as.matrix(CorresMatrix))
return(out)
}
getHnode=function(node,tree)
{
tips=1:length(tree$tip.label)
NH=node.depth.edgelength(tree)
DescNodes=getDescendants(node=node,tree=tree)
DescTips=DescNodes[DescNodes%in%tips]
Hnode=max(NH[DescTips]-NH[node])
return(Hnode)
}
getHnodes=function(tree)
{
allnodes=sort(unique(c(tree$edge)))
names(allnodes)=as.character(allnodes)
tips=1:length(tree$tip.label)
nodes=allnodes[!allnodes%in%tips]
Hnodes=sapply(nodes,getHnode,tree=tree)
return(Hnodes)
}
multigetDescendants=function(node,tree){
alltips=1:length(tree$tip.label)
nodes=getDescendants(tree=tree,node=node)
tips=nodes[nodes%in%alltips]
return(tree$tip.label[tips])
}
New_toOld_OTUs=function(similarity,tree)
{
Ntips=length(tree$tip.label)
tips=1:Ntips
NameTips=tree$tip.label
Hnodes=getHnodes(tree) #get Nodes height
Hbranches=cbind(Hnodes[as.character(tree$edge[,1])],Hnodes[as.character(tree$edge[,2])]) #put them in a matrix of edges
NodeToCluster=tree$edge[(Hbranches[,1]>similarity)&(Hbranches[,2]<similarity),2] #select the branches whom descandant node to be collapsed
NodeToCluster=NodeToCluster[!is.na(NodeToCluster)] #remove tips
DescendandTips=lapply(NodeToCluster,multigetDescendants,tree=tree) #get descendant tips
names(DescendandTips)=as.character(NodeToCluster)
#Lenght of the different categories of OTUs
N_newOTUS=length(DescendandTips)
N_collapsedOldOtus= sum(do.call(rbind, lapply(DescendandTips, function(x) length(x))))
N_totalNewOTUS=Ntips-N_collapsedOldOtus+N_newOTUS
print(paste(similarity," similarity provides ",N_totalNewOTUS," total new OTUs",sep=""))
NewOTUs_OldOTUs_Matrix=NA
if (N_totalNewOTUS>2)
{
#Names of the different categories of OTUs
collapsedOldOtus= unlist(DescendandTips)
UncollapsedOTUs=NameTips[!NameTips%in%collapsedOldOtus]
#Creating and filling New to Old matrix correpondance
NewOTUSNames=c(UncollapsedOTUs,as.character(NodeToCluster))
NewOTUs_OldOTUs_Matrix=Matrix(0,ncol=N_totalNewOTUS,nrow=Ntips,dimnames = list(tree$tip.label,NewOTUSNames))
NewOTUs_OldOTUs_Matrix=Matrix(0,ncol=N_totalNewOTUS,nrow=Ntips,dimnames = list(tree$tip.label,NewOTUSNames))
for (i in UncollapsedOTUs){NewOTUs_OldOTUs_Matrix[i,i]=1} # uncollapsed OTUS
for (i in as.character(NodeToCluster)){NewOTUs_OldOTUs_Matrix[DescendandTips[[i]],i]=1} #collapsed OTUS
} else{print("Only 2 OTUS (or less) present at this resolution -- are you sure this is meaningfull?")}
return(NewOTUs_OldOTUs_Matrix)
}
MultipleBeta=BDTT(similarity_slices=slices,tree=Tree,sampleOTUs=t(as(otu_table(mothur), "matrix")),onlyBeta=T)
MultipleBetaJac=BDTT(similarity_slices=slices,tree=Tree,sampleOTUs=t(as(otu_table(mothur), "matrix")),onlyBeta=T,metric="jac")
BDTT=function(similarity_slices,tree,sampleOTUs,onlyBeta=T,metric="jac"){
Betas=lapply(similarity_slices,getBDTT,tree=tree,sampleOTUs=sampleOTUs,onlyBeta=T,metric=metric)
names(Betas)=similarity_slices
res=do.call(function(...){abind(...,along=0)},Betas)
return(res)
}
dim9MultipleBetaJac
dim(MultipleBetaJac)
MultipleBetaJac=BDTT(similarity_slices=slices,tree=Tree,sampleOTUs=t(as(otu_table(mothur), "matrix")),onlyBeta=T,metric="jac")
MultipleBetaJac
dimnames(MultipleBetaJac)
saveRDS(MultipleBetaJac,"My_outputs/Multiple_Resolution_Beta_Jaccard.RDS")
samples=dimnames(MultipleBetaJac)[[2]]
Metadata=data.frame(sample_data(mothur))[-12]
predictors=names(Metadata)
predictors
stats=c("F.Model","R2","Pr(>F)")
StatsRes=matric(NA,dim=c(length(predictors),length(stats)),dimnames=list(predictors,stats))
StatsRes=matrix(NA,dim=c(length(predictors),length(stats)),dimnames=list(predictors,stats))
StatsRes=dataframe(NA,dim=c(length(predictors),length(stats)),dimnames=list(predictors,stats))
StatsRes=data.frame(NA,dim=c(length(predictors),length(stats)),dimnames=list(predictors,stats))
c(length(predictors),length(stats))
StatsRes=data_frame(NA,dim=c(length(predictors),length(stats)),dimnames=list(predictors,stats))
StatsRes
StatsRes=matrix(NA,dim=c(length(predictors),length(stats)),dimnames=list(predictors,stats))
matric
matrix
?matrix
StatsRes=matrix(NA,dimnames=list(predictors,stats))
StatsRes=expand.grid(predictors,similarity_slices)
StatsRes
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
StatsRes
StatsRes=expand.grid(predictors=predictors,similarity_slices=similarity_slices)
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
for (i in similarity_slices)
{
print(i)
for (j in predictors) {StatsRes[(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=unlist(adonis(formula = MultipleBeta[i,sampleN,sampleN]~  Metadata[sampleN,j])$aov.tab[1,c(4,5,6)])}
}
for (j in predictors) {StatsRes[(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=unlist(adonis(formula = MultipleBetaJac[i,sampleN,sampleN]~  Metadata[sampleN,j])$aov.tab[1,c(4,5,6)])}
MultipleBetaJac[i,sampleN,sampleN]
i
similarity_slices
for (i in StatsRes$similarity_slices)
{
print(i)
for (j in StatsRes$predictors) {StatsRes[(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=unlist(adonis(formula = MultipleBetaJac[i,sampleN,sampleN]~  Metadata[sampleN,j])$aov.tab[1,c(4,5,6)])}
}
i
j
StatsRes$similarity_slices
StatsRes=expand.grid(predictors=predictors,similarity_slices=as.character(similarity_slices))
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
for (i in StatsRes$similarity_slices)
{
print(i)
for (j in StatsRes$predictors) {StatsRes[(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=unlist(adonis(formula = MultipleBetaJac[i,sampleN,sampleN]~  Metadata[sampleN,j])$aov.tab[1,c(4,5,6)])}
}
StatsRes$similarity_slices
for (i in as.character(similarity_slices))
{
for (j in predictors)
{
res=unlist(adonis(formula = MultipleBetaJac[i,sampleN,sampleN]~  Metadata[sampleN,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=res
}
}
StatsRes
ggplot(aes(y=R2,x=similarity_slices,fill=predictors))+geom_line()
ggplot(aes(y=R2,x=similarity_slices,fill=predictors),data=StatsRes)+geom_line()
ggplot(aes(y=R2,x=similarity_slices,fill=predictors),data=StatsRes)+geom_points()
ggplot(aes(y=R2,x=similarity_slices,fill=predictors),data=StatsRes)+geom_point()
ggplot(aes(y=R2,x=similarity_slices,colour=predictors),data=StatsRes)+geom_point()
ggplot(aes(y=R2,x=similarity_slices,colour=predictors),data=StatsRes)+geom_point()+geom_line()
ggplot(aes(y=R2,x=similarity_slices,colour=predictors,group=predictors),data=StatsRes)+geom_point()+geom_line()
adonis(Jaccard~Depth_m,data=data.frame(sample_data(mothur)))
adonis(UniFracBeta~Depth_m,data=data.frame(sample_data(mothur)))
library(ade4)
dudi.pca(data.frame(sample_data(mothur)))
library(ade4)
data.frame(sample_data(mothur))
colnames(metadata)
metadata=metadata[,c("Depth_m","PO4_uM","SiO2_uM","NO3_uM","NH4_uM","CH4_nM" ,"Salinity_PSU")]
colnames(metadata)
OTU.clean.physeq = otu_table(as.matrix(OTU.clean), taxa_are_rows=FALSE)
tax.clean.physeq = tax_table(as.matrix(taxonomy.clean))
metadata.physeq = sample_data(metadata)
Tree=drop.tip(Tree,sample(Tree$tip.label,4000))
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
OTU = read.table("data/Saanich_cruise72_mothur_OTU_table.shared", sep="\t", header=TRUE, row.names=2)
OTU.clean = OTU %>%
select(-label, -numOtus)
taxonomy = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy.clean = taxonomy %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
metadata = read.table("data/Saanich_cruise72_metadata.txt", sep="\t", header=TRUE, row.names=1)
metadata=metadata[,c("Depth_m","PO4_uM","SiO2_uM","NO3_uM","NH4_uM","CH4_nM" ,"Salinity_PSU")]
OTU.clean.physeq = otu_table(as.matrix(OTU.clean), taxa_are_rows=FALSE)
tax.clean.physeq = tax_table(as.matrix(taxonomy.clean))
metadata.physeq = sample_data(metadata)
Tree=drop.tip(Tree,sample(Tree$tip.label,4000))
phylogeny.physeq=phy_tree(Tree)
mothur = phyloseq(OTU.clean.physeq, tax.clean.physeq, metadata.physeq,phylogeny.physeq) #note how phyloseq discard OTUs from OTU table and taxonomy beqacsue they are not in the phylogeny
mothur
Tree=drop.tip(Tree,sample(Tree$tip.label,3500))
#Tree
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
#OTU table
OTU = read.table("data/Saanich_cruise72_mothur_OTU_table.shared", sep="\t", header=TRUE, row.names=2)
OTU.clean = OTU %>%
select(-label, -numOtus)
#taxonomy
taxonomy = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy.clean = taxonomy %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
#metadata
metadata = read.table("data/Saanich_cruise72_metadata.txt", sep="\t", header=TRUE, row.names=1)
metadata=metadata[,c("Depth_m","PO4_uM","SiO2_uM","NO3_uM","NH4_uM","CH4_nM" ,"Salinity_PSU")]
#colnames(metadata)
# Construct the phyloseq object
#Define parts of the phyloseq object.
OTU.clean.physeq = otu_table(as.matrix(OTU.clean), taxa_are_rows=FALSE)
tax.clean.physeq = tax_table(as.matrix(taxonomy.clean))
metadata.physeq = sample_data(metadata)
Tree=drop.tip(Tree,sample(Tree$tip.label,3500))
phylogeny.physeq=phy_tree(Tree)
mothur = phyloseq(OTU.clean.physeq, tax.clean.physeq, metadata.physeq,phylogeny.physeq) #note how phyloseq discard OTUs from OTU table and taxonomy beqacsue they are not in the phylogeny
mothur
#Rarefying!
apply(otu_table(mothur),1,sum) # Number od reads by sample
# 2. Taxonomic and phylogenetic  Beta-diversity
#Compute and compare metrics
BC=vegdist(otu_table(mothur),method = "bray")
Jaccard=vegdist(otu_table(mothur),method = "jac")
UniFracBeta=UniFrac(mothur)
#UniFracWBeta=UniFrac(mothur,weighted = T)
plot(Jaccard,UniFracBeta)
# Visualize Beta
ordi = ordinate(mothur, "PCoA", "unifrac", weighted=F)
plot_ordination(mothur, ordi, color="Depth_m")
ordi = ordinate(mothur, "PCoA", "bray", weighted=F)
plot_ordination(mothur, ordi, color="Depth_m")
# Test the relationship with environment using PERMANOVA
adonis(BC~Depth_m,data=data.frame(sample_data(mothur)))
adonis(Jaccard~Depth_m,data=data.frame(sample_data(mothur)))
adonis(UniFracBeta~Depth_m,data=data.frame(sample_data(mothur)))
Hnodes=getHnodes(Tree)
hist(Hnodes,n=150,xlim=c(0,.5))
slices=c(seq(from=0,to=0.3,by=0.025))
mat=t(as(otu_table(mothur), "matrix"))
MultipleBetaJac=BDTT(similarity_slices=slices,tree=Tree,sampleOTUs=mat,onlyBeta=T,metric="jac")
saveRDS(MultipleBetaJac,"My_outputs/Multiple_Resolution_Beta_Jaccard.RDS")
samples=dimnames(MultipleBetaJac)[[2]]
Metadata=data.frame(sample_data(mothur))[-12]
predictors=names(Metadata)
predictors
StatsRes=expand.grid(predictors=predictors,similarity_slices=as.character(similarity_slices))
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
for (i in as.character(similarity_slices))
{
for (j in predictors)
{
res=unlist(adonis(formula = MultipleBetaJac[i,sampleN,sampleN]~  Metadata[sampleN,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=res
}
}
StatsRes
ggplot(aes(y=R2,x=similarity_slices,colour=predictors,group=predictors),data=StatsRes)+geom_point()+geom_line()
res
#Tree
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
#OTU table
OTU = read.table("data/Saanich_cruise72_mothur_OTU_table.shared", sep="\t", header=TRUE, row.names=2)
OTU.clean = OTU %>%
select(-label, -numOtus)
#taxonomy
taxonomy = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy.clean = taxonomy %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
#metadata
metadata = read.table("data/Saanich_cruise72_metadata.txt", sep="\t", header=TRUE, row.names=1)
metadata=metadata[,c("Depth_m","PO4_uM","SiO2_uM","NO3_uM","NH4_uM","CH4_nM" ,"Salinity_PSU")]
#colnames(metadata)
# Construct the phyloseq object
#Define parts of the phyloseq object.
OTU.clean.physeq = otu_table(as.matrix(OTU.clean), taxa_are_rows=FALSE)
tax.clean.physeq = tax_table(as.matrix(taxonomy.clean))
metadata.physeq = sample_data(metadata)
#Tree=drop.tip(Tree,sample(Tree$tip.label,3500))
phylogeny.physeq=phy_tree(Tree)
mothur = phyloseq(OTU.clean.physeq, tax.clean.physeq, metadata.physeq,phylogeny.physeq) #note how phyloseq discard OTUs from OTU table and taxonomy beqacsue they are not in the phylogeny
mothur
#Rarefying!
apply(otu_table(mothur),1,sum) # Number od reads by sample
# 2. Taxonomic and phylogenetic  Beta-diversity
#Compute and compare metrics
BC=vegdist(otu_table(mothur),method = "bray")
Jaccard=vegdist(otu_table(mothur),method = "jac")
UniFracBeta=UniFrac(mothur)
#UniFracWBeta=UniFrac(mothur,weighted = T)
plot(Jaccard,UniFracBeta)
# Visualize Beta
ordi = ordinate(mothur, "PCoA", "unifrac", weighted=F)
plot_ordination(mothur, ordi, color="Depth_m")
ordi = ordinate(mothur, "PCoA", "bray", weighted=F)
plot_ordination(mothur, ordi, color="Depth_m")
# Test the relationship with environment using PERMANOVA
adonis(BC~Depth_m,data=data.frame(sample_data(mothur)))
adonis(Jaccard~Depth_m,data=data.frame(sample_data(mothur)))
adonis(UniFracBeta~Depth_m,data=data.frame(sample_data(mothur)))
# 3. BDTT
#Recall the scale of divergence times
Hnodes=getHnodes(Tree)
hist(Hnodes,n=150,xlim=c(0,.5))
#defines the slices
slices=c(seq(from=0,to=0.3,by=0.025))
#Run BDTT
mat=t(as(otu_table(mothur), "matrix"))
MultipleBetaJac=BDTT(similarity_slices=slices,tree=Tree,sampleOTUs=mat,onlyBeta=T,metric="jac")
saveRDS(MultipleBetaJac,"My_outputs/Multiple_Resolution_Beta_Jaccard.RDS")
MultipleBetaBC=BDTT(similarity_slices=slices,tree=Tree,sampleOTUs=mat,onlyBeta=T,metric="bc")
saveRDS(MultipleBetaJac,"My_outputs/Multiple_Resolution_Beta_BrayCurtis.RDS")
# 3. Statistical tests: 21 predictors * n number of slices = a lot of models!
samples=dimnames(MultipleBetaJac)[[2]]
Metadata=data.frame(sample_data(mothur))
predictors=names(Metadata)
predictors
StatsRes=expand.grid(predictors=predictors,similarity_slices=as.character(similarity_slices))
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
for (i in as.character(similarity_slices))
{
for (j in predictors)
{
res=unlist(adonis(formula = MultipleBetaJac[i,sampleN,sampleN]~  Metadata[sampleN,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=res
}
}
# Plotting
ggplot(aes(y=R2,x=similarity_slices,colour=predictors,group=predictors),data=StatsRes)+geom_point()+geom_line()
ggplot(aes(y=R2,x=similarity_slices,colour=predictors,group=predictors),data=StatsRes)+geom_point()+geom_line()+ggtitle("R2 from PERMANOVA;Metric-Jaccard")
ggsave("My_outputs/BDTT_Jaccard.pdf",height = 7,width = 7)
mothur
sample_data(mothur)
a=sample_data(mothur)
6adonis
?adonis
adonis(formula = MultipleBetaJac[i,,]~  data.frame(sample_data(mothur))[,j])$aov.tab
adonis(formula = MultipleBetaJac[i,sampleN,sampleN]~  data.frame(sample_data(mothur))[sampleN,j])$aov.tab
StatsResBC=expand.grid(predictors=predictors,similarity_slices=as.character(similarity_slices))
StatsResBC[["F.Model"]]=StatsResBC[["R2"]]=StatsResBC[["Pr(>F)"]]=NA
for (i in as.character(similarity_slices))
{
for (j in predictors)
{
res=unlist(adonis(formula = MultipleBetaBC[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsResBC[(StatsResBC$predictors==j)&(StatsResBC$similarity_slices==i),3:5]=res
}
}
MultipleBetaBC=BDTT(similarity_slices=slices,tree=Tree,sampleOTUs=mat,onlyBeta=T,metric="bc")
New_OTUs_sample_matrix=getNew_OTUs_sample_matrix(similarity=similarity,sampleOTUs=sampleOTUs,tree=tree)
BetasPA=getBeta(t(New_OTUs_sample_matrix[[1]]),ab=F)[c("jtu","jac"),,]
BetasAb=getBeta(t(New_OTUs_sample_matrix[[1]]),ab=T)[c("bctu","bc"),,]
metric="bc"
AllBetas=abind(BetasPA,BetasAb,along = 1)
AllBetas=BetasPA[metric,,]
getBDTT=function(similarity,tree,sampleOTUs,onlyBeta=T,metric="jac")
{
New_OTUs_sample_matrix=getNew_OTUs_sample_matrix(similarity=similarity,sampleOTUs=sampleOTUs,tree=tree)
BetasPA=getBeta(t(New_OTUs_sample_matrix[[1]]),ab=F)[c("jtu","jac"),,]
#rownames(BetasPA)=paste(rownames(BetasPA),"_Simi_",similarity,sep="")
BetasAb=getBeta(t(New_OTUs_sample_matrix[[1]]),ab=T)[c("bctu","bc"),,]
#rownames(BetasAb)=paste(rownames(BetasAb),"_Simi_",similarity,sep="")
AllBetas=abind(BetasPA,BetasAb,along = 1)
AllBetas=AllBetas[metric,,]
if (onlyBeta==T){res=list(Beta_Div=AllBetas,NewOTU_table=New_OTUs_sample_matrix[[1]],New_to_old_OTUs=New_OTUs_sample_matrix[[2]])}
if (onlyBeta==T){res=AllBetas}
return(res)
}
MultipleBetaBC=BDTT(similarity_slices=slices,tree=Tree,sampleOTUs=mat,onlyBeta=T,metric="bc")
saveRDS(MultipleBetaJac,"My_outputs/Multiple_Resolution_Beta_BrayCurtis.RDS")
ggplot(aes(y=R2,x=similarity_slices,colour=predictors,group=predictors),data=StatsRes)+geom_point()+geom_line()+facet_wrap(~metric)
# 3. Statistical tests: 21 predictors * n number of slices = a lot of models!
predictors=names(sample_data(mothur))
StatsResJac=expand.grid(metric=c("Jac","BC"),predictors=predictors,similarity_slices=as.character(similarity_slices))
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
for (i in as.character(similarity_slices))
{
for (j in predictors)
{
res=unlist(adonis(formula = MultipleBetaJac[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsResJac$metric=="Jac")&(StatsResJac$predictors==j)&(StatsResJac$similarity_slices==i),3:5]=res
res=unlist(adonis(formula = MultipleBetaBC[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsResJac$metric=="BC")&(StatsResJac$predictors==j)&(StatsResJac$similarity_slices==i),3:5]=res
}
}
i
j
res=unlist(adonis(formula = MultipleBetaJac[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
res=unlist(adonis(formula = MultipleBetaBC[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsResJac$metric=="BC")&(StatsResJac$predictors==j)&(StatsResJac$similarity_slices==i),3:5]=res
# 3. Statistical tests: 21 predictors * n number of slices = a lot of models!
predictors=names(sample_data(mothur))
StatsResJac=expand.grid(metric=c("Jac","BC"),predictors=predictors,similarity_slices=as.character(similarity_slices))
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
for (i in as.character(similarity_slices))
{
for (j in predictors)
{
res=unlist(adonis(formula = MultipleBetaJac[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsResJac$metric=="Jac")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=res
res=unlist(adonis(formula = MultipleBetaBC[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsResJac$metric=="BC")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=res
}
}
# 3. Statistical tests: 21 predictors * n number of slices = a lot of models!
predictors=names(sample_data(mothur))
StatsResJac=expand.grid(metric=c("Jac","BC"),predictors=predictors,similarity_slices=as.character(similarity_slices))
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
for (i in as.character(similarity_slices))
{
for (j in predictors)
{
res=unlist(adonis(formula = MultipleBetaJac[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="Jac")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=res
res=unlist(adonis(formula = MultipleBetaBC[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="BC")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=res
}
}
ggplot(aes(y=R2,x=similarity_slices,colour=predictors,group=predictors),data=StatsRes)+geom_point()+geom_line()+facet_wrap(~metric)
StatsRes
predictors=names(sample_data(mothur))
StatsRes=expand.grid(metric=c("Jac","BC"),predictors=predictors,similarity_slices=as.character(similarity_slices))
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
for (i in as.character(similarity_slices))
{
for (j in predictors)
{
res=unlist(adonis(formula = MultipleBetaJac[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="Jac")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=res
res=unlist(adonis(formula = MultipleBetaBC[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="BC")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=res
}
}
i
j
res=unlist(adonis(formula = MultipleBetaJac[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="Jac")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=res
StatsRes
predictors=names(sample_data(mothur))
StatsRes=expand.grid(similarity_slices=as.character(similarity_slices),predictors=predictors,metric=c("Jac","BC"))
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
StatsRes
for (i in as.character(similarity_slices))
{
for (j in predictors)
{
res=unlist(adonis(formula = MultipleBetaJac[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="Jac")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=res
res=unlist(adonis(formula = MultipleBetaBC[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="BC")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),3:5]=res
}
}
predictors=names(sample_data(mothur))
StatsRes=expand.grid(similarity_slices=as.character(similarity_slices),predictors=predictors,metric=c("Jac","BC"))
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
for (i in as.character(similarity_slices))
{
for (j in predictors)
{
res=unlist(adonis(formula = MultipleBetaJac[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="Jac")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),4:6]=res
res=unlist(adonis(formula = MultipleBetaBC[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="BC")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),4:6]=res
}
}
ggplot(aes(y=R2,x=similarity_slices,colour=predictors,group=predictors),data=StatsRes)+geom_point()+geom_line()+facet_wrap(~metric)
ggsave("My_outputs/BDTT_Jaccard_BC.pdf",height = 7,width = 10)
