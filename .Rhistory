plot(res[[i]],xlim=c(-.5,1),ylim=c(0,YY),col="grey",lwd=.3,main=titles[j],xlab="Differences between FD of maxPD and random strategies")
pp=list()
for (j in list.files(path))
{
YY=50
for (i in 1:length(res))
{
if (i==1){plot(res[[i]],xlim=c(-.5,1),ylim=c(0,YY),col="grey",lwd=.3,main=titles[j],xlab="Differences between FD of maxPD and random strategies")}
else {lines(res[[i]],col="grey",lwd=.3)}
}
abline(v=0)
abline(v=-.1,lwd=.3)
abline(v=.1,lwd=.3)
}
path="/Users/fmazel/Desktop/Recherche/En_cours/Analyses_en_cours/sCAP/empricalTest/Outputs/Final_Outputs/Differences_Reliablility/"
list.files(path)
par(mfrow=c(2,3))
pp=list()
for (j in list.files(path))
{
YY=50
for (i in 1:length(res))
{
if (i==1){plot(res[[i]],xlim=c(-.5,1),ylim=c(0,YY),col="grey",lwd=.3,main=titles[j],xlab="Differences between FD of maxPD and random strategies")}
else {lines(res[[i]],col="grey",lwd=.3)}
}
abline(v=0)
abline(v=-.1,lwd=.3)
abline(v=.1,lwd=.3)
}
res=readRDS(file=paste(path,j,sep=""))
j
par(mfrow=c(2,3))
pp=list()
for (j in list.files(path))
{
YY=50
res=readRDS(file=paste(path,j,sep=""))
for (i in 1:length(res))
{
if (i==1){plot(res[[i]],xlim=c(-.5,1),ylim=c(0,YY),col="grey",lwd=.3,main=titles[j],xlab="Differences between FD of maxPD and random strategies")}
else {lines(res[[i]],col="grey",lwd=.3)}
}
abline(v=0)
abline(v=-.1,lwd=.3)
abline(v=.1,lwd=.3)
}
dev.off()
par(mfrow=c(2,3))
pp=list()
for (j in list.files(path))
{
YY=50
res=readRDS(file=paste(path,j,sep=""))
for (i in 1:length(res))
{
if (i==1){plot(res[[i]],xlim=c(-.5,1),ylim=c(0,YY),col="grey",lwd=.3,main=titles[j],xlab="Differences between FD of maxPD and random strategies")}
else {lines(res[[i]],col="grey",lwd=.3)}
}
abline(v=0)
abline(v=-.1,lwd=.3)
abline(v=.1,lwd=.3)
}
j
par(mfrow=c(3,2))
pp=list()
for (j in list.files(path))
{
YY=50
res=readRDS(file=paste(path,j,sep=""))
for (i in 1:length(res))
{
if (i==1){plot(res[[i]],xlim=c(-.5,1),ylim=c(0,YY),col="grey",lwd=.3,main=titles[j],xlab="Differences between FD of maxPD and random strategies")}
else {lines(res[[i]],col="grey",lwd=.3)}
}
abline(v=0)
abline(v=-.1,lwd=.3)
abline(v=.1,lwd=.3)
}
pdf(file="/Users/fmazel/Desktop/Recherche/En_cours/Analyses_en_cours/sCAP/empricalTest/PlottedResults/MainPlots/Plots/Reliability_DifferencesPlot.pdf",height = 6,width = 4)
par(mfrow=c(3,2))
pp=list()
for (j in list.files(path))
{
YY=50
res=readRDS(file=paste(path,j,sep=""))
for (i in 1:length(res))
{
if (i==1){plot(res[[i]],xlim=c(-.5,1),ylim=c(0,YY),col="grey",lwd=.3,main=titles[j],xlab="Differences between FD of maxPD and random strategies")}
else {lines(res[[i]],col="grey",lwd=.3)}
}
abline(v=0)
abline(v=-.1,lwd=.3)
abline(v=.1,lwd=.3)
}
dev.off()
pdf(file="/Users/fmazel/Desktop/Recherche/En_cours/Analyses_en_cours/sCAP/empricalTest/PlottedResults/MainPlots/Plots/Reliability_DifferencesPlot.pdf",height = 9,width = 7)
par(mfrow=c(3,2))
pp=list()
for (j in list.files(path))
{
YY=20
res=readRDS(file=paste(path,j,sep=""))
for (i in 1:length(res))
{
if (i==1){plot(res[[i]],xlim=c(-.5,1),ylim=c(0,YY),col="grey",lwd=.3,main=titles[j],xlab="Differences between FD of maxPD and random strategies")}
else {lines(res[[i]],col="grey",lwd=.3)}
}
abline(v=0)
abline(v=-.1,lwd=.3)
abline(v=.1,lwd=.3)
}
dev.off()
path="/Users/fmazel/Desktop/Recherche/En_cours/Analyses_en_cours/sCAP/empricalTest/Outputs/Final_Outputs/Differences_Reliablility/"
titles=c("Bird Families","Bird Assemblages (Grid cells)","Mammal Families","Mammal Assemblages (Grid cells)","Fish Families","Fish Assemblages (Grid cells)")
names(titles)=c("BBFamilies.RDS"    , "BirdsBreeding.RDS","MammalFamilies.RDS" ,"Mammals.RDS", "FF.RDS","Fishes.RDS")
pdf(file="/Users/fmazel/Desktop/Recherche/En_cours/Analyses_en_cours/sCAP/empricalTest/PlottedResults/MainPlots/Plots/Reliability_DifferencesPlot.pdf",height = 9,width = 7)
par(mfrow=c(3,2))
pp=list()
for (j in list.files(path))
{
YY=20
res=readRDS(file=paste(path,j,sep=""))
for (i in 1:length(res))
{
if (i==1){plot(res[[i]],xlim=c(-.5,1),ylim=c(0,YY),col="grey",lwd=.3,main=titles[j],xlab="Differences between FD of maxPD and random strategies")}
else {lines(res[[i]],col="grey",lwd=.3)}
}
abline(v=0)
abline(v=-.1,lwd=.3)
abline(v=.1,lwd=.3)
}
dev.off()
?png
png(file="/Users/fmazel/Desktop/Recherche/En_cours/Analyses_en_cours/sCAP/empricalTest/PlottedResults/MainPlots/Plots/Reliability_DifferencesPlot.png",height = 900,width = 700)
par(mfrow=c(3,2))
pp=list()
for (j in list.files(path))
{
YY=20
res=readRDS(file=paste(path,j,sep=""))
for (i in 1:length(res))
{
if (i==1){plot(res[[i]],xlim=c(-.5,1),ylim=c(0,YY),col="grey",lwd=.3,main=titles[j],xlab="Differences between FD of maxPD and random strategies")}
else {lines(res[[i]],col="grey",lwd=.3)}
}
abline(v=0)
abline(v=-.1,lwd=.3)
abline(v=.1,lwd=.3)
}
dev.off()
png(file="/Users/fmazel/Desktop/Recherche/En_cours/Analyses_en_cours/sCAP/empricalTest/PlottedResults/MainPlots/Plots/Reliability_DifferencesPlot.png",height = 900,width = 700,pointsize = 6)
par(mfrow=c(3,2))
pp=list()
for (j in list.files(path))
{
YY=20
res=readRDS(file=paste(path,j,sep=""))
for (i in 1:length(res))
{
if (i==1){plot(res[[i]],xlim=c(-.5,1),ylim=c(0,YY),col="grey",lwd=.3,main=titles[j],xlab="Differences between FD of maxPD and random strategies")}
else {lines(res[[i]],col="grey",lwd=.3)}
}
abline(v=0)
abline(v=-.1,lwd=.3)
abline(v=.1,lwd=.3)
}
dev.off()
png(file="/Users/fmazel/Desktop/Recherche/En_cours/Analyses_en_cours/sCAP/empricalTest/PlottedResults/MainPlots/Plots/Reliability_DifferencesPlot.png",height = 1800,width = 1400,pointsize = 12)
par(mfrow=c(3,2))
pp=list()
for (j in list.files(path))
{
YY=20
res=readRDS(file=paste(path,j,sep=""))
for (i in 1:length(res))
{
if (i==1){plot(res[[i]],xlim=c(-.5,1),ylim=c(0,YY),col="grey",lwd=.3,main=titles[j],xlab="Differences between FD of maxPD and random strategies")}
else {lines(res[[i]],col="grey",lwd=.3)}
}
abline(v=0)
abline(v=-.1,lwd=.3)
abline(v=.1,lwd=.3)
}
dev.off()
?ape
library(ape)
?ape
?plot.phylo
t=rtree(n = 200)
plot.phylo(t,show.tip.label = F)
?rtree
t=chronopl(rtree(n = 200))
?chronopl
library(phytools)
t=pbtree(n = 200)
plot.phylo(t,show.tip.label = F)
plot.phylo(t,show.tip.label = F,type = "radial")
plot.phylo(t,show.tip.label = F,type = "fan")
NN=6
pdf('Desktop/Recherche/En_cours/Analyses_en_cours/sCAP/empricalTest/Redaction/NC/FinalSUb/Tree_BlogPost.pdf',height = NN,width = NN)
plot.phylo(t,show.tip.label = F,type = "fan")
dev.off()
pdf('Desktop/Recherche/En_cours/Analyses_en_cours/sCAP/empricalTest/Redaction/NC/FinalSUb/Tree_BlogPost.pdf',height = NN,width = NN)
plot.phylo(t,show.tip.label = F,type = "fan",edge.color = "white")
dev.off()
??levelplot
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(rasterVis)
library(gridBase)
library(grid)
library(ape)
library(rgeos)
library(maptools)
?levelplot
citation(rasterVis)
citation("rasterVis")
library(rasterVis)
?layer
citation("latticeExtra")
?maptools
library(maptools)
library(rgeos)
?rgeos
rm(list=ls())
srMAX=5
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(rasterVis)
library(gridBase)
library(grid)
library(ape)
#library(rgeos)
#library(maptools)
is.odd <- function(x) x %% 2 != 0
myTheme=rasterTheme(region=MyColours)
MyColours=(colorRampPalette((brewer.pal('RdBu', n=9)))(10+j-1))
MyColours=MyColours[c(1:15,26:40)]
j=31
MyColours=(colorRampPalette((brewer.pal('RdBu', n=9)))(10+j-1))
MyColours=MyColours[c(1:15,26:40)]
MyColours=(colorRampPalette((brewer.pal('RdBu', n=9)))(6+j-1))
MyColours=MyColours[c(1:15,20:36)]
MyBreaks=seq(-1,1,len=(j))
cuts=levels(cut(0,MyBreaks))
names(MyColours)=cuts
plot(MyBreaks,col=MyColours,pch=16,cex=3)
myTheme=rasterTheme(region=MyColours)
myTheme[['axis.line']]$col = "transparent"
myTheme[['strip.background']]$col = "transparent"
myTheme[['strip.border']]$col = "transparent"
myTheme[['just']] = "left"
load("~/Desktop/Recherche/Data/Vertebrate_Data/Global/Pixels/Upscale/200km/raster/GISdatafor200_200Cells.rdata")
load("~/Desktop/Recherche/Data/Abiotic data/Coast shapeFiles/CoastMollweide.RData")
pixs=as.character(tmpM$data)
#   MAMMALS GEO
###############
SumUp=readRDS("~/Desktop/Recherche/En_cours/Analyses_en_cours/sCAP/empricalTest/Outputs/Final_Outputs/Res_GEO_Mammals.RDS")
FDpenalgreedy=readRDS("~/Desktop/Recherche/En_cours/Analyses_en_cours/sCAP/empricalTest/Outputs/Final_Outputs/FDgreedy_Mammals.RDS")
table(FDpenalgreedy$Perc)/2
table(FDpenalgreedy$thres)
table(table(FDpenalgreedy$data.id))
ss=paste(SumUp$data,SumUp$thres,SumUp$Perc,sep='_')
gg=paste(FDpenalgreedy$data.id,FDpenalgreedy$thres,FDpenalgreedy$Perc,sep='_')
pos=match(ss,gg)
SumUp$penal_greedymaxFD=FDpenalgreedy[pos,'FRic_FD_For']
SumUp$penal_greedymaxFD=as.numeric(SumUp$penal_greedymaxFD)
#filter
SumUp=SumUp[SumUp$Mean_n>srMAX,]
SumUp=SumUp[SumUp$thres==i,]
# Compute area between curves
tmpM=aggregate(SumUp$Perc,list(data=SumUp$data,thres=SumUp$thres),FUN=function(x){mean(x,na.rm=T)})
tmpM$diffmaxFD=tmpM$diffmaxPD=NA
for (j in unique(SumUp$data))
{
print(j)
r=SumUp[SumUp$data==j,c('Perc','Mean_FRic_RD_For','Mean_FRic_PD_For','penal_greedymaxFD')]
r=rbind(c(0,0,0,0),r,c(1,rep(SumUp[SumUp$data==j,'Mean_FRic_All'][1],3)))
f1 <- approxfun(r$Perc, r$Mean_FRic_PD_For-r$Mean_FRic_RD_For)
tmpM[tmpM$data==j,'diffmaxPD']=integrate(f1, 0, 1,rel.tol = 1e-10)$value
f1 <- approxfun(r$Perc, r$penal_greedymaxFD-r$Mean_FRic_RD_For)
tmpM[tmpM$data==j,'diffmaxFD']=integrate(f1, 0, 1,rel.tol = 1e-10)$value
}
tmpM$S=tmpM$diffmaxPD/tmpM$diffmaxFD
aa=c("Mean_FRic_All","Mean_Ic","Mean_Gamma","Mean_Beta","Mean_BloomK","Mean_MantelSpearman","Mean_Lambda","Mean_n","Mean_m","Mean_n.trt")
for (j in aa){ tmpM[[j]]=aggregate(SumUp[[j]],list(data=SumUp$data,thres=SumUp$thres),FUN=function(x){mean(x,na.rm=T)})$x}
tmpM$S[tmpM$S==Inf]=NA
tmpM$S[tmpM$S==-Inf]=NA
tmpM$b=cut(tmpM$S,MyBreaks)
tmpM$cols=MyColours[as.character(tmpM$b)]
MEAN=mean(tmpM$S,na.rm=T)
meantext=paste("mean:",round(MEAN,2),sep=" ")
CI=round(quantile(x=tmpM$S,probs=c(.025,.975)),1)
CItext=paste("95%CI: (",CI[1],";",CI[2],")",sep='')
# Plots
Bloom_plotM=ggplot(tmpM,aes(y=S,x=Mean_BloomK,colour=cols))+geom_point()+scale_colour_identity()+xlab(titleYbloom)+ylab(nameMetric)+theme_bw()+ggtitle(plotsT['tbloM'])+theme(plot.title=titi)+ xlim(0,quantile(tmpM$Mean_BloomK,.999,na.rm=T))+ylim(slims)
SR_plotM=ggplot(tmpM,aes(y=S,x=Mean_n,colour=cols))+geom_point()+scale_colour_identity()+xlab(nTr)+ylab(nameMetric)+theme_bw()+ggtitle(plotsT['tsrM'])+theme(plot.title=titi)+ylim(slims)
Trait_plotM=ggplot(tmpM,aes(y=S,x=as.factor(Mean_n.trt)))+geom_violin()+geom_boxplot(width=0.1)+scale_colour_identity()+theme_bw()+xlab(nPCOA)+ylab(nameMetric)+ggtitle(plotsT['tnpcoaM'])+theme(plot.title=titi)+ylim(slims)
Gamma_plotM=ggplot(tmpM,aes(y=S,x=Mean_Gamma,colour=cols))+geom_point()+scale_colour_identity()+xlab(titleYgamma)+ylab(nameMetric)+theme_bw()+ggtitle(plotsT['tgamM'])+theme(plot.title=titi)+ylim(slims)
Beta_plotM=ggplot(tmpM,aes(y=S,x=Mean_Beta,colour=cols))+geom_point()+scale_colour_identity()+xlab(titleYbeta)+ylab(nameMetric)+theme_bw()+ggtitle(plotsT['tbetaM'])+theme(plot.title=titi)+ xlim(quantile(tmpM$Mean_Beta,c(.001,.999),na.rm=T))+ylim(slims)
RawHistM=ggplot(tmpM,aes(x=S,fill=b))+geom_histogram(breaks=MyBreaks)+xlab(paste(nameMetric,sep=''))+xlab(nameMetric)
RawHistM=RawHistM+scale_fill_manual(breaks = levels(tmpM$b), values = MyColours, name = "X Intervals", drop=F)+xlim(c(mini, maxi))+theme_bw()+theme(legend.position="none",panel.grid = element_blank())+ggtitle(plotsT['thistM'])+theme(plot.title=titi)
RawHistM=RawHistM+geom_vline(xintercept=MEAN)+annotate(geom = 'text',label=meantext,x=-.5,y=430,size=SS)
RawHistM=RawHistM+annotate(geom = 'text',label=CItext,x=-.5,y=325,size=SS)
pixs=as.character(tmpM$data)
tmpM$pixs=sapply(pixs,FUN=function(x){strsplit(x,'_PixNO')[[1]][2]})
t2@data@values[!names(t2@data@values)%in%tmpM$pixs]=NA
t2@data@values[tmpM$pixs]=tmpM$S
newE=extent(-11000000 , 16000000 , -6826274 , 8750122 )
t2=(crop(t2,newE))
coast=crop(coast,newE)
?crop
citation("ratsr")
citation("raster")
?layer
?ratserVis
?rasterVis
?raster
?sp
toBibtex(citation("ouch"))
toBibtex(citation("rasterVis"))
?toBibtex
citation("rasterVis")
citation("latticeExtra")
Dat=read.table("Desktop/Thyrio56.code.txt")
View(Dat)
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
View(Dat)
dudi.acm(Dat[,1:10])
library(ade4)
dudi.acm(Dat[,1:10])
Dat$HAB
as.factor(Dat)
data.frame(Dat)
Dat=data.frame(Dat)
Dat$HAB
Dat$HAB[1]
class(Dat$HAB[1])
for (i in 1:10)
{
Dat[,i]=as.factor(Dat[,i])
}
Dat
Dat[1,1]
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat=="?"
Dat[Dat=="?"]=NA
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat[Dat=="?"]=NA
Dat=data.frame(Dat)
for (i in 1:10) { Dat[,i]=as.factor(Dat[,i])}
Res=dudi.acm(Dat[,1:10])
View(Dat)
head(Dat)
Dat[,-c(3,11)]
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat[Dat=="?"]=NA
for (i in 1:10) { Dat[,i]=as.factor(Dat[,i])}
Res=dudi.acm(Dat[,-c(3,11)])
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat[Dat=="?"]=NA
dat1=Dat[,-c(3,11)]
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat[Dat=="?"]=NA
for (i in 1:10) { Dat[,i]=as.factor(Dat[,i])}
dat1=Dat[,-c(3,11)]
View(dat1)
dat1[,1]
Res=dudi.acm(dat1)
View(dat1)
dat1=Dat[,-c(2,3,11)]
Res=dudi.acm(dat1)
dat1
Res=dudi.acm(dat1)
Res=dudi.acm(t(dat1))
data(ours)
ours
dudi.acm(ours)
Res=dudi.acm(dat1)
dat1
dat1[1,6]
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat[Dat=="?"]=NA
Dat=data.frame(Dat)
for (i in 1:10) { Dat[,i]=as.factor(Dat[,i])}
dat1=Dat[,-c(2,3,11)]
dat1[1,6]
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat[Dat=="?"]=NA
View(Dat)
Dat[1,6]
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat=data.frame(Dat)
Dat
for (i in 1:10) { Dat[,i]=as.factor(Dat[,i])}
dat1=Dat[,-c(2,3,11)]
Res=dudi.acm(dat1)
Res
s.corcircle(Res)
s.corcircle(Res$lw)
s.corcircle(Res$cw)
Res
plot(Res$lw)
plot(Res$li)
s1d.boxplot(dudi.acm(ours, scan = FALSE)$li[, 1], ours)
data(ours)
summary(ours)
if(adegraphicsLoaded()) {
g1 <- s1d.boxplot(dudi.acm(ours, scan = FALSE)$li[, 1], ours)
} else {
boxplot(dudi.acm(ours, scan = FALSE))
}
s.corcircle(Res$cw[,1:2])
plot(Res$li[,1:2])
Dat$CLA
resultats=cbind(Res$li[,1:2],Dat$CLA)
resultats
library(ggplot2)
resultats=cbind(Res$li[,1:2],calde=Dat$CLA)
resultats=cbind(Res$li[,1:2],clade=Dat$CLA)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=clade))+geom_point()
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point()
?aes
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade),alpha=.1))+geom_point()
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade),alpha=.01))+geom_point()
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)),alpha=.01)+geom_point()
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.01)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.1)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.1,size=2)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.1,size=4)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.3,size=4)
resultats=cbind(Res$li[,1:4],clade=Dat$CLA)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.3,size=4)
ggplot(data=resultats,aes(x=Axis1,y=Axis3,col=as.factor(clade)))+geom_point(alpha=.3,size=4)
Res
Res$cw
Res$c1
View(Dat)
dat1=Dat[,c(8:10)]
Res=dudi.acm(dat1)
resultats=cbind(Res$li[,1:3],clade=Dat$CLA)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.3,size=4)
ggplot(data=resultats,aes(x=Axis1,y=Axis3,col=as.factor(clade)))+geom_point(alpha=.3,size=4)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.3,size=4)
library(ape)
?ace
setwd("/Users/florentmqzel/Documents/GitHub/WorkingDirectory/")
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
rm(list=ls())
getwd()
setwd("/Users/florentmqzel/Documents/GitHub/WorkingDirectory/")
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
# if the named package is not installed then install it
library(seqinr)
library(ape)
library(vegan)
library(tidyverse)
library(phyloseq)
library(betapart)
library(abind)
library(tidyr)
library(Matrix)
#Put here your working directory (i.e you need to replace the location of the file to match the location of the downloaded folder on YOUR computer)
setwd("/Users/florentmqzel/Documents/GitHub/WorkingDirectory/")
setwd("/Users/florentmqzel/Documents/GitHub/WorkingDirectory/")
setwd("/Users/florentmqzel/Documents/GitHub/WorkingDirectory/")
setwd("")
setwd("/Users/fmazel/Documents/GitHub/WorkingDirectory/")
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
OTU = read.table("data/Saanich_cruise72_mothur_OTU_table.shared", sep="\t", header=TRUE, row.names=2)
OTU.clean = OTU %>%
select(-label, -numOtus)
taxonomy = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy.clean = taxonomy %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
metadata = read.table("data/Saanich_cruise72_metadata.txt", sep="\t", header=TRUE, row.names=1)
metadata=metadata[,c("Depth_m","PO4_uM","SiO2_uM","NO3_uM","NH4_uM","CH4_nM" ,"Salinity_PSU")]
OTU.clean.physeq = otu_table(as.matrix(OTU.clean), taxa_are_rows=FALSE)
tax.clean.physeq = tax_table(as.matrix(taxonomy.clean))
metadata.physeq = sample_data(metadata)
phylogeny.physeq=phy_tree(Tree)
mothur = phyloseq(OTU.clean.physeq, tax.clean.physeq, metadata.physeq,phylogeny.physeq) #note how phyloseq discard OTUs from OTU table and taxonomy beqacsue they are not in the phylogeny
mothur
plot_ordination(mothur, ordi, color="Depth_m")
mothue
mothur
ordi = ordinate(mothur, "PCoA", "unifrac", weighted=F)
plot_ordination(mothur, ordi, color="Depth_m")
ggsave("My_outputs/PCoA_Unifrac.pdf",height = 7,width = 10)
ggsave("My_outputs/PCoA_Unifrac.pdf",height = 4,width = 4)
ggsave("My_outputs/PCoA_Unifrac.pdf",height = 4,width = 6)
adonis(UniFracBeta~Depth_m,data=data.frame(sample_data(mothur)))
UniFracBeta=UniFrac(mothur)
adonis(UniFracBeta~Depth_m,data=data.frame(sample_data(mothur)))
data.frame(sample_data(mothur))
adonis(UniFracBeta~Depth_m+NO3_uM,data=data.frame(sample_data(mothur)))
adonis2(UniFracBeta~Depth_m+NO3_uM,data=data.frame(sample_data(mothur)))
adonis(BC~NO3_uM,data=data.frame(sample_data(mothur)))
BC=vegdist(otu_table(mothur),method = "bray")
Jaccard=vegdist(otu_table(mothur),method = "jac")
UniFracBeta=UniFrac(mothur)
adonis(BC~Depth_m,data=data.frame(sample_data(mothur)))
adonis(BC~NO3_uM,data=data.frame(sample_data(mothur)))
adonis(UniFracBeta~NO3_uM,data=data.frame(sample_data(mothur)))
adonis(Jaccard~NO3_uM,data=data.frame(sample_data(mothur)))
adonis(UniFracBeta~NO3_uM,data=data.frame(sample_data(mothur)))
?adonis
