tmpM$pixs=sapply(pixs,FUN=function(x){strsplit(x,'_PixNO')[[1]][2]})
t2@data@values[!names(t2@data@values)%in%tmpM$pixs]=NA
t2@data@values[tmpM$pixs]=tmpM$S
newE=extent(-11000000 , 16000000 , -6826274 , 8750122 )
t2=(crop(t2,newE))
coast=crop(coast,newE)
?crop
citation("ratsr")
citation("raster")
?layer
?ratserVis
?rasterVis
?raster
?sp
toBibtex(citation("ouch"))
toBibtex(citation("rasterVis"))
?toBibtex
citation("rasterVis")
citation("latticeExtra")
Dat=read.table("Desktop/Thyrio56.code.txt")
View(Dat)
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
View(Dat)
dudi.acm(Dat[,1:10])
library(ade4)
dudi.acm(Dat[,1:10])
Dat$HAB
as.factor(Dat)
data.frame(Dat)
Dat=data.frame(Dat)
Dat$HAB
Dat$HAB[1]
class(Dat$HAB[1])
for (i in 1:10)
{
Dat[,i]=as.factor(Dat[,i])
}
Dat
Dat[1,1]
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat=="?"
Dat[Dat=="?"]=NA
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat[Dat=="?"]=NA
Dat=data.frame(Dat)
for (i in 1:10) { Dat[,i]=as.factor(Dat[,i])}
Res=dudi.acm(Dat[,1:10])
View(Dat)
head(Dat)
Dat[,-c(3,11)]
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat[Dat=="?"]=NA
for (i in 1:10) { Dat[,i]=as.factor(Dat[,i])}
Res=dudi.acm(Dat[,-c(3,11)])
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat[Dat=="?"]=NA
dat1=Dat[,-c(3,11)]
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat[Dat=="?"]=NA
for (i in 1:10) { Dat[,i]=as.factor(Dat[,i])}
dat1=Dat[,-c(3,11)]
View(dat1)
dat1[,1]
Res=dudi.acm(dat1)
View(dat1)
dat1=Dat[,-c(2,3,11)]
Res=dudi.acm(dat1)
dat1
Res=dudi.acm(dat1)
Res=dudi.acm(t(dat1))
data(ours)
ours
dudi.acm(ours)
Res=dudi.acm(dat1)
dat1
dat1[1,6]
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat[Dat=="?"]=NA
Dat=data.frame(Dat)
for (i in 1:10) { Dat[,i]=as.factor(Dat[,i])}
dat1=Dat[,-c(2,3,11)]
dat1[1,6]
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat[Dat=="?"]=NA
View(Dat)
Dat[1,6]
Dat=read.table("Desktop/Thyrio56.code.txt",header = T,row.names = 1)
Dat=data.frame(Dat)
Dat
for (i in 1:10) { Dat[,i]=as.factor(Dat[,i])}
dat1=Dat[,-c(2,3,11)]
Res=dudi.acm(dat1)
Res
s.corcircle(Res)
s.corcircle(Res$lw)
s.corcircle(Res$cw)
Res
plot(Res$lw)
plot(Res$li)
s1d.boxplot(dudi.acm(ours, scan = FALSE)$li[, 1], ours)
data(ours)
summary(ours)
if(adegraphicsLoaded()) {
g1 <- s1d.boxplot(dudi.acm(ours, scan = FALSE)$li[, 1], ours)
} else {
boxplot(dudi.acm(ours, scan = FALSE))
}
s.corcircle(Res$cw[,1:2])
plot(Res$li[,1:2])
Dat$CLA
resultats=cbind(Res$li[,1:2],Dat$CLA)
resultats
library(ggplot2)
resultats=cbind(Res$li[,1:2],calde=Dat$CLA)
resultats=cbind(Res$li[,1:2],clade=Dat$CLA)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=clade))+geom_point()
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point()
?aes
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade),alpha=.1))+geom_point()
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade),alpha=.01))+geom_point()
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)),alpha=.01)+geom_point()
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.01)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.1)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.1,size=2)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.1,size=4)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.3,size=4)
resultats=cbind(Res$li[,1:4],clade=Dat$CLA)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.3,size=4)
ggplot(data=resultats,aes(x=Axis1,y=Axis3,col=as.factor(clade)))+geom_point(alpha=.3,size=4)
Res
Res$cw
Res$c1
View(Dat)
dat1=Dat[,c(8:10)]
Res=dudi.acm(dat1)
resultats=cbind(Res$li[,1:3],clade=Dat$CLA)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.3,size=4)
ggplot(data=resultats,aes(x=Axis1,y=Axis3,col=as.factor(clade)))+geom_point(alpha=.3,size=4)
ggplot(data=resultats,aes(x=Axis1,y=Axis2,col=as.factor(clade)))+geom_point(alpha=.3,size=4)
library(ape)
?ace
setwd("/Users/florentmqzel/Documents/GitHub/WorkingDirectory/")
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
rm(list=ls())
getwd()
setwd("/Users/florentmqzel/Documents/GitHub/WorkingDirectory/")
# if the named package is not installed then install it
library(seqinr)
library(ape)
library(vegan)
library(tidyverse)
library(phyloseq)
library(betapart)
library(abind)
library(tidyr)
library(Matrix)
#Put here your working directory (i.e you need to replace the location of the file to match the location of the downloaded folder on YOUR computer)
setwd("/Users/fmazel/Documents/GitHub/WorkingDirectory/")
getwd()
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
OTU = read.table("data/Saanich_cruise72_mothur_OTU_table.shared", sep="\t", header=TRUE, row.names=2)
OTU.clean = OTU %>%
select(-label, -numOtus)
taxonomy = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy.clean = taxonomy %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
metadata = read.table("data/Saanich_cruise72_metadata.txt", sep="\t", header=TRUE, row.names=1)
metadata=metadata[,c("Depth_m","PO4_uM","SiO2_uM","NO3_uM","NH4_uM","CH4_nM" ,"Salinity_PSU")]
OTU.clean.physeq = otu_table(as.matrix(OTU.clean), taxa_are_rows=FALSE)
tax.clean.physeq = tax_table(as.matrix(taxonomy.clean))
metadata.physeq = sample_data(metadata)
phylogeny.physeq=phy_tree(Tree)
mothur = phyloseq(OTU.clean.physeq, tax.clean.physeq, metadata.physeq,phylogeny.physeq) #note how phyloseq discard OTUs from OTU table and taxonomy beqacsue they are not in the phylogeny
mothur
plot_bar(mothur,fill="Phylum")
nitrospina_percent = subset_taxa(saanich_percent, Genus == "Nitrospina")
saanich_percent = transform_sample_counts(saanich, function(x) 100 * x/sum(x))
plot_bar(saanich_percent, fill="Phylum")
plot_bar(saanich_percent, fill="Phylum") +
geom_bar(aes(fill=Phylum), stat="identity")
saanich_percent = transform_sample_counts(saanich, function(x) 100 * x/sum(x))
plot_bar(saanich_percent, fill="Phylum")
plot_bar(saanich_percent, fill="Phylum") +
geom_bar(aes(fill=Phylum), stat="identity")
saanich=mothur
saanich_percent = transform_sample_counts(saanich, function(x) 100 * x/sum(x))
plot_bar(saanich_percent, fill="Phylum")
plot_bar(saanich_percent, fill="Phylum") +
geom_bar(aes(fill=Phylum), stat="identity")
nitrospina_percent = subset_taxa(saanich_percent, Genus == "Nitrospina")
# heatmap
plot_heatmap(nitrospina_percent, method=NULL, sample.label="NO3_uM", sample.order="NO3_uM")
taxonomy.raw = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy= taxonomy.raw %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
#Change the name of the fasta alignment file
alignment=read.fasta("data/mothur_intermediate_files/Saanich.final.opti_mcc.unique_list.0.03.rep.fasta")
names(alignment)=rownames(taxonomy)
#remove OTUS not assigned to a domain
taxonomy=subset(taxonomy,!Domain=="unknown")
taxonomy=subset(taxonomy,!Domain=="unknown")
# Domain constrains
taxonomy[["Bacteria"]][taxonomy$Domain=="Bacteria"]=1
taxonomy[["Bacteria"]][taxonomy$Domain=="Archaea"]=0
# Phylum constrains
Phylum=unique(taxonomy$Phylum)
Phylum=subset(Phylum,!Phylum=="unknown_unclassified") #remove this factor
for (i in Phylum)
{
taxonomy[[as.character(i)]][taxonomy$Phylum==i]=1
taxonomy[[as.character(i)]][!taxonomy$Phylum==i]=0
}
Constrains=taxonomy[,c("Bacteria",as.character(Phylum))] #keep only the constrains
View(Constrains)
head(Constrains)
head(taxonomy)
Domains=unique(taxonomy$Domain)
paletteDomains=rainbow(length(Domains));names(paletteDomains)=Domains #define colours for taxonomic groups (domains here)
coloursDomains=paletteDomains[as.character(taxonomy$Domain)];names(coloursDomains)=rownames(taxonomy) #assign colors to each OTU depending on its taxonomic group
pdf("My_outputs/Phylogenetic_tree_colouredby_Domains.pdf",width=15,height=15)
plot(Tree,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
legend(1, 0, legend=names(paletteDomains),fill=paletteDomains, cex=2)
dev.off()
# check the impact of the topological contrains
pdf("My_outputs/Phylogenetic_tree_colouredby_Phylum_NoConstrains.pdf",width=15,height=15)
plot(TreeNoC,type="fan",cex=.3,tip.color=coloursPhylums[TreeNoC$tip.label])
legend(1, 1, legend=names(palettePhylums),fill=palettePhylums, cex=1)
dev.off()
# Note: If you did not contruct the tree, replace 'My_outputs' by 'My_outputs_Back_Up'
Tree=read.tree('My_outputs/Saanish_FastTree')
TreeNoC=read.tree('My_outputs/Saanish_FastTree_withoutConstrains')
# Plot the tree with colours for Domains
Domains=unique(taxonomy$Domain)
paletteDomains=rainbow(length(Domains));names(paletteDomains)=Domains #define colours for taxonomic groups (domains here)
coloursDomains=paletteDomains[as.character(taxonomy$Domain)];names(coloursDomains)=rownames(taxonomy) #assign colors to each OTU depending on its taxonomic group
pdf("My_outputs/Phylogenetic_tree_colouredby_Domains.pdf",width=15,height=15)
plot(Tree,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
legend(1, 0, legend=names(paletteDomains),fill=paletteDomains, cex=2)
dev.off()
# Plot the tree with colours for Phylum
Phylums=unique(taxonomy$Phylum)
palettePhylums=rainbow(length(Phylums));names(palettePhylums)=Phylums #define colours for taxonomic groups (Phylums here)
coloursPhylums=palettePhylums[as.character(taxonomy$Phylum)];names(coloursPhylums)=rownames(taxonomy) #assign colors to each OTU depending on its taxonomic group
pdf("My_outputs/Phylogenetic_tree_colouredby_Phylum.pdf",width=15,height=15)
plot(Tree,type="fan",cex=.3,tip.color=coloursPhylums[Tree$tip.label])
legend(1, 1, legend=names(palettePhylums),fill=palettePhylums, cex=1)
dev.off()
# check the impact of the topological contrains
pdf("My_outputs/Phylogenetic_tree_colouredby_Phylum_NoConstrains.pdf",width=15,height=15)
plot(TreeNoC,type="fan",cex=.3,tip.color=coloursPhylums[TreeNoC$tip.label])
legend(1, 1, legend=names(palettePhylums),fill=palettePhylums, cex=1)
dev.off()
unique(taxonomy$Phylum)
# load the taxonomic file
taxonomy.raw = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy= taxonomy.raw %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
# load the alignment
alignment=read.fasta("data/mothur_intermediate_files/Saanich.final.opti_mcc.unique_list.0.03.rep.fasta")
names(alignment)=rownames(taxonomy) #Change the name of the fasta alignment file
#remove OTUS not assigned to a domain
taxonomy=subset(taxonomy,!Domain=="unknown")
# Domain constrains
taxonomy[["Bacteria"]][taxonomy$Domain=="Bacteria"]=1
taxonomy[["Bacteria"]][taxonomy$Domain=="Archaea"]=0
# Phylum constrains
Phylum=unique(taxonomy$Phylum)
Phylum=subset(Phylum,!Phylum%in%c("unknown_unclassified","Bacteria_unclassified", "Archaea_unclassified") #remove this factor
for (i in Phylum)
{
taxonomy[[as.character(i)]][taxonomy$Phylum==i]=1
taxonomy[[as.character(i)]][!taxonomy$Phylum==i]=0
}
Constrains=taxonomy[,c("Bacteria",as.character(Phylum))] #keep only the constrains
#Convert to fasta file
sequences=list()
for (i in 1:dim(Constrains)[1]){sequences[[i]]=Constrains[i,]}
write.fasta(sequences, names=rownames(Constrains), file.out="My_outputs/Phylogenetic_Constrains.fasta", open = "w", nbchar = 60, as.string = FALSE)
#Prune the alignment to sequences with assigned domains
alignment=alignment[rownames(Constrains)]
write.fasta(alignment, names=names(alignment), file.out="My_outputs/Saanich.final.opti_mcc.unique_list.0.03.rep_Names_Modified.fasta", open = "w", nbchar = 60, as.string = FALSE)
# load the taxonomic file
taxonomy.raw = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy= taxonomy.raw %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
# load the alignment
alignment=read.fasta("data/mothur_intermediate_files/Saanich.final.opti_mcc.unique_list.0.03.rep.fasta")
names(alignment)=rownames(taxonomy) #Change the name of the fasta alignment file
#remove OTUS not assigned to a domain
taxonomy=subset(taxonomy,!Domain=="unknown")
# Domain constrains
taxonomy[["Bacteria"]][taxonomy$Domain=="Bacteria"]=1
taxonomy[["Bacteria"]][taxonomy$Domain=="Archaea"]=0
# Phylum constrains
Phylum=unique(taxonomy$Phylum)
Phylum=subset(Phylum,!Phylum%in%c("unknown_unclassified","Bacteria_unclassified", "Archaea_unclassified")) #remove this factor
for (i in Phylum)
{
taxonomy[[as.character(i)]][taxonomy$Phylum==i]=1
taxonomy[[as.character(i)]][!taxonomy$Phylum==i]=0
}
Constrains=taxonomy[,c("Bacteria",as.character(Phylum))] #keep only the constrains
#Convert to fasta file
sequences=list()
for (i in 1:dim(Constrains)[1]){sequences[[i]]=Constrains[i,]}
write.fasta(sequences, names=rownames(Constrains), file.out="My_outputs/Phylogenetic_Constrains.fasta", open = "w", nbchar = 60, as.string = FALSE)
#Prune the alignment to sequences with assigned domains
alignment=alignment[rownames(Constrains)]
write.fasta(alignment, names=names(alignment), file.out="My_outputs/Saanich.final.opti_mcc.unique_list.0.03.rep_Names_Modified.fasta", open = "w", nbchar = 60, as.string = FALSE)
View(Constrains)
write.fasta(alignment, names=names(alignment), file.out="My_outputs/Saanich.final.opti_mcc.unique_list.0.03.rep_Names_Modified.fasta", open = "w", nbchar = 60, as.string = FALSE)
getwd()
View(Constrains)
if (!require("seqinr")) install.packages("seqinr")
if (!require("ape")) install.packages("ape")
if (!require("vegan")) install.packages("vegan")
if (!require("tidyverse")) install.packages("tidyverse")
source("./R functions/BDTT_functions.R")
require(phylofactor)
library(knitr)
library(knitr)
purl("Workflow.Rmd", output = "test2.R", documentation = 2)
require("phylofactor")
devtools::install_github('reptalex/phylofactor')
library(devtools)
?require
rm(list=ls())
library(seqinr)
library(ape)
library(vegan)
library(tidyverse)
library(phyloseq)
library(betapart)
library(abind)
library(tidyr)
library(Matrix)
library(ggplot2)
library(cowplot)
install.packages("cowplot")
library(cowplot)
source("./R functions/BDTT_functions.R")
taxonomy.raw = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy= taxonomy.raw %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
alignment=read.fasta("data/mothur_intermediate_files/Saanich.final.opti_mcc.unique_list.0.03.rep.fasta")
names(alignment)=rownames(taxonomy)
taxonomy=subset(taxonomy,!Domain=="unknown")
taxonomy[["Bacteria"]][taxonomy$Domain=="Bacteria"]=1
taxonomy[["Bacteria"]][taxonomy$Domain=="Archaea"]=0
Phylum=unique(taxonomy$Phylum)
Phylum=subset(Phylum,!Phylum%in%c("unknown_unclassified","Bacteria_unclassified", "Archaea_unclassified")) #remove this factor
for (i in Phylum)
{
taxonomy[[as.character(i)]][taxonomy$Phylum==i]=1
taxonomy[[as.character(i)]][!taxonomy$Phylum==i]=0
}
Constrains=taxonomy[,c("Bacteria",as.character(Phylum))] #keep only the constrains
sequences=list()
for (i in 1:dim(Constrains)[1]){sequences[[i]]=Constrains[i,]}
write.fasta(sequences, names=rownames(Constrains), file.out="My_outputs/Phylogenetic_Constrains.fasta", open = "w", nbchar = 60, as.string = FALSE)
alignment=alignment[rownames(Constrains)]
write.fasta(alignment, names=names(alignment), file.out="My_outputs/Saanich.final.opti_mcc.unique_list.0.03.rep_Names_Modified.fasta", open = "w", nbchar = 60, as.string = FALSE)
Tree=read.tree('My_outputs/Saanish_FastTree')
TreeNoC=read.tree('My_outputs/Saanish_FastTree_withoutConstrains')
Domains=unique(taxonomy$Domain)
paletteDomains=rainbow(length(Domains));names(paletteDomains)=Domains
coloursDomains=paletteDomains[as.character(taxonomy$Domain)];names(coloursDomains)=rownames(taxonomy)
pdf("My_outputs/Phylogenetic_tree_colouredby_Domains.pdf",width=15,height=15)
plot(Tree,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
plot(Tree,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
legend(1, 0, legend=names(paletteDomains),fill=paletteDomains, cex=2)
dev.off()
Archaea=row.names(taxonomy)[taxonomy$Domain=="Archaea"]
MRCAnode=getMRCA(phy = Tree,tip = Archaea)
TreeNewRoot=root(phy=Tree, node=MRCAnode,resolve.root = T)
write.tree(TreeNewRoot,'My_outputs/Saanish_FastTreeRooted')
pdf("My_outputs/Phylogenetic_tree_colouredby_Domains_NewRoot.pdf",width=15,height=15)
plot(TreeNewRoot,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
plot(TreeNewRoot,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
legend(1, 0, legend=names(paletteDomains),fill=paletteDomains, cex=2)
dev.off()
Tree=read.tree('My_outputs/Saanish_FastTree')
View(Constrains)
Domains=unique(taxonomy$Domain)
paletteDomains=rainbow(length(Domains));names(paletteDomains)=Domains
coloursDomains=paletteDomains[as.character(taxonomy$Domain)];names(coloursDomains)=rownames(taxonomy)
pdf("My_outputs/Phylogenetic_tree_colouredby_Domains.pdf",width=15,height=15)
plot(Tree,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
plot(Tree,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
legend(1, 0, legend=names(paletteDomains),fill=paletteDomains, cex=2)
dev.off()
Phylums=unique(taxonomy$Phylum)
palettePhylums=rainbow(length(Phylums));names(palettePhylums)=Phylums #define colours for taxonomic groups (Phylums here)
coloursPhylums=palettePhylums[as.character(taxonomy$Phylum)];names(coloursPhylums)=rownames(taxonomy) #assign colors to each OTU depending on its taxonomic group
pdf("My_outputs/Phylogenetic_tree_colouredby_Phylum_with Constrains.pdf",width=15,height=15)
plot(Tree,type="fan",cex=.3,tip.color=coloursPhylums[Tree$tip.label])
plot(Tree,type="fan",cex=.3,tip.color=coloursPhylums[Tree$tip.label])
legend(1, 1, legend=names(palettePhylums),fill=palettePhylums, cex=1)
dev.off()
pdf("My_outputs/Phylogenetic_tree_colouredby_Phylum_with_Constrains.pdf",width=15,height=15)
plot(Tree,type="fan",cex=.3,tip.color=coloursPhylums[Tree$tip.label])
legend(1, 1, legend=names(palettePhylums),fill=palettePhylums, cex=1)
dev.off()
Archaea=row.names(taxonomy)[taxonomy$Domain=="Archaea"]
MRCAnode=getMRCA(phy = Tree,tip = Archaea)
TreeNewRoot=root(phy=Tree, node=MRCAnode,resolve.root = T)
write.tree(TreeNewRoot,'My_outputs/Saanish_FastTreeRooted')
pdf("My_outputs/Phylogenetic_tree_colouredby_Domains_NewRoot.pdf",width=15,height=15)
plot(TreeNewRoot,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
plot(TreeNewRoot,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
legend(1, 0, legend=names(paletteDomains),fill=paletteDomains, cex=2)
dev.off()
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
OTU = read.table("data/Saanich_cruise72_mothur_OTU_table.shared", sep="\t", header=TRUE, row.names=2)
OTU.clean = OTU %>%
select(-label, -numOtus)
taxonomy = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy.clean = taxonomy %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
metadata = read.table("data/Saanich_cruise72_metadata.txt", sep="\t", header=TRUE, row.names=1)
metadata=metadata[,c("Depth_m","PO4_uM","SiO2_uM","NO3_uM","NH4_uM","CH4_nM" ,"Salinity_PSU")]
OTU.clean.physeq = otu_table(as.matrix(OTU.clean), taxa_are_rows=FALSE)
tax.clean.physeq = tax_table(as.matrix(taxonomy.clean))
metadata.physeq = sample_data(metadata)
phylogeny.physeq=phy_tree(Tree)
mothur = phyloseq(OTU.clean.physeq, tax.clean.physeq, metadata.physeq,phylogeny.physeq)
mothur
BC=vegdist(otu_table(mothur),method = "bray")
Jaccard=vegdist(otu_table(mothur),method = "jac")
UniFracBeta=UniFrac(mothur)
UniFracWBeta=UniFrac(mothur,weighted = T)
plot(Jaccard,UniFracBeta)
ordi = ordinate(mothur, "PCoA", "unifrac", weighted=F)
plot_ordination(mothur, ordi, color="Depth_m")
ordi = ordinate(mothur, "PCoA", "bray", weighted=F)
plot_ordination(mothur, ordi, color="Depth_m")
Hnodes=getHnodes(Tree)
hist(Hnodes,n=150,xlim=c(0,.5))
slices=c(seq(from=0,to=0.3,by=0.025))
mat=t(as(otu_table(mothur), "matrix"))
MultipleBetaJac=BDTT(similarity_slices=slices,tree=Tree,sampleOTUs=mat,onlyBeta=T,metric="jac")
MultipleBetaBC=BDTT(similarity_slices=slices,tree=Tree,sampleOTUs=mat,onlyBeta=T,metric="bc")
saveRDS(MultipleBetaJac,"My_outputs/Multiple_Resolution_Beta_BrayCurtis.RDS")
saveRDS(MultipleBetaBC,"My_outputs/Multiple_Resolution_Beta_BrayCurtis.RDS")
class(MultipleBetaJac)
dim(MultipleBetaJac)
MultipleBetaJac
predictors=names(sample_data(mothur))
StatsRes=expand.grid(similarity_slices=as.character(slices),predictors=predictors,metric=c("Jac","BC"))
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
head(StatsRes)
for (i in as.character(slices))
{
for (j in predictors)
{
res=unlist(adonis(formula = MultipleBetaJac[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="Jac")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),4:6]=res
res=unlist(adonis(formula = MultipleBetaBC[i,,]~data.frame(sample_data(mothur))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="BC")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),4:6]=res
}
}
ggplot(aes(y=R2,x=similarity_slices,colour=predictors,group=factor(predictors)),data=StatsRes)+geom_point()+geom_line()+facet_wrap(~metric)
ggsave("My_outputs/BDTT_Jaccard_BC.pdf",height = 7,width = 10)
ggsave("My_outputs/BDTT_Jaccard_BC.pdf",height = 7,width = 13)
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
OTU = read.table("data/Saanich_cruise72_mothur_OTU_table.shared", sep="\t", header=TRUE, row.names=2)
OTU.clean = OTU %>%
select(-label, -numOtus)
OTU.matrix <- as.matrix(t(OTU.clean))
OTU.matrix <- OTU.matrix[row.names(OTU.matrix) %in% Tree$tip.label,]
taxonomy = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy.clean = taxonomy %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
taxonomy <- taxonomy %>% select(-Size)
taxonomy$OTU_ID = row.names(taxonomy)
taxonomy <- taxonomy[Tree$tip.label, c('OTU_ID','Taxonomy')]
taxonomy[,2] <- as.character(taxonomy[,2])
metadata = read.table("data/Saanich_cruise72_metadata.txt", sep="\t", header=TRUE, row.names=1)
metadata=metadata[,c("Depth_m","PO4_uM","SiO2_uM","NO3_uM","NH4_uM","CH4_nM" ,"Salinity_PSU")]
metadata <- metadata[colnames(OTU.matrix),]
set.seed(1)
CellDiam <- rlnorm(length(Tree$tip.label))
arcobacter <- Tree$tip.label %in% row.names(taxonomy.clean[taxonomy.clean$Genus == 'Arcobacter',])
actinobacteria <- (Tree$tip.label %in% row.names(taxonomy.clean[taxonomy.clean$Phylum == 'Actinobacteria',]))
CellDiam[arcobacter] <- rlnorm(sum(arcobacter))*4
CellDiam[actinobacteria] <- rlnorm(sum(actinobacteria))/4
logCellDiam <- log(CellDiam)
pf_twoSample <- twoSampleFactor(logCellDiam, Tree, nfactors=5)
library(phylofactor)
source("https://bioconductor.org/biocLite.R")
biocLite("ggtree")
library(phylofactor)
library(cowplot)
library(phylofactor)
install.packages('devtools')
devtools::install_github('reptalex/phylofactor')
install.packages("devtools")
?biocLite
source("https://bioconductor.org/biocLite.R")
biocLite("ggtree")
biocLite("ggtree")
biocLite("Biostrings")
install.packages('devtools')
devtools::install_github('reptalex/phylofactor')
devtools::install_github('reptalex/phylofactor')
