remove.packages("phylofactor")
install.packages('devtools')
devtools::install_github('reptalex/phylofactor')
library("phylofactor", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
remove.packages("phylofactor")
source("https://bioconductor.org/biocLite.R")
biocLite("ggtree")
biocLite("Biostrings")
install.packages('devtools')
install.packages("devtools")
devtools::install_github('reptalex/phylofactor')
setwd("/Users/fmazel/Documents/GitHub/Microbiome_Phylo_Diversity_Workshop")
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
purl("Workflow.Rmd", output = "test2.R", documentation = 2)
??purl
library(knitr)
purl("Workflow.Rmd", output = "test2.R", documentation = 2)
setwd("/Users/fmazel/Documents/GitHub/Microbiome_Phylo_Diversity_Workshop")
purl("Workflow.Rmd", output = "test2.R", documentation = 2)
library(seqinr)
library(ape)
library(vegan)
library(tidyverse)
library(phyloseq)
library(betapart)
library(abind)
library(tidyr)
library(Matrix)
library(ggplot2)
library(cowplot)
library(phylofactor)
#'
#' ### Setting your working directory
#'
#' Copy the workshop folder "Working directory" from GitHub on your computer
#'
#' Then tell R that this is going to be the folder where we are going to work
#'
#' In Flo case:
## ---- message=FALSE------------------------------------------------------
setwd("/Users/fmazel/Documents/GitHub/Microbiome_Phylo_Diversity_Workshop")
#'
#' ### Importing custom R functions
#'
#' We have written some custom R functions for use in this workshop. It is good
#' practice to define these functions in a separate file and then to import them
#' into your scripts, so that you don't duplicate the code. (Duplication, you
#' may recall, can end up in mutation! ;) )
#'
## ---- message=FALSE------------------------------------------------------
source("./R functions/BDTT_functions.R")
#'
#' ## 3. Building a microbial phylogenetic tree <a name="Building-a-microbial-phylogenetic-tree"></a>
#'
#' ### 3.1. Alignment <a name="Alignment"></a>
#'
#' We are not going to cover this stage here, as it will be carried out in other workshops.
#' Many software offer to align sequences, some of them are wrapped within [Mothur](https://www.mothur.org) or [Qiime2](https://qiime2.org)
#' For example you can look at this [tutorial](https://github.com/FloMazel/Microbiome_Phylo_Diversity_Workshop/blob/master/data/mothur_pipeline.html) producing the data we are going to use here.
#'
#' ### 3.2. Tree Building <a name="Tree-Building"></a>
#'
#' Typical read length in microbiome studies are relatively short and have thus contains limited information to reconstruct phylogeentic trees, especially to reconstruct deep branches. To avoid biased phylogenies, we thus constrains deep branches to follow taxonomic classification as it is admitted that large taxonomic clades are monophyletic (informations based on longer sequences). The choice of the constrains is not easy. Here we will constain tree reconstruction by Domain (Bacteria/Archea) and phylums.
#'
#' We will use FastTree to reconstruct the phylogeneic hypotheses. While fastTree is not the best software to reconstruct phylogenies (because it makes a lot of approximations), it has the huge avantage to be fast, which is often critical in microbial species, as there are a very high number of "species".
#'
#' #### Topological constrains
#'
#' Load the taxonomic file
#'
## ---- message=FALSE------------------------------------------------------
taxonomy.raw = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy= taxonomy.raw %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
#'
#' Change the name of the fasta alignment file
#'
## ---- message=FALSE------------------------------------------------------
alignment=read.fasta("data/mothur_intermediate_files/Saanich.final.opti_mcc.unique_list.0.03.rep.fasta")
names(alignment)=rownames(taxonomy)
#'
#' Remove OTUS not assigned to a domain
#'
## ---- message=FALSE------------------------------------------------------
taxonomy=subset(taxonomy,!Domain=="unknown")
#'
#' Domain constrains
#'
## ---- message=FALSE------------------------------------------------------
taxonomy[["Bacteria"]][taxonomy$Domain=="Bacteria"]=1
taxonomy[["Bacteria"]][taxonomy$Domain=="Archaea"]=0
#'
#' Phylum constrains
#'
## ---- message=FALSE------------------------------------------------------
Phylum=unique(taxonomy$Phylum)
Phylum=subset(Phylum,!Phylum%in%c("unknown_unclassified","Bacteria_unclassified", "Archaea_unclassified")) #remove this factor
for (i in Phylum)
{
taxonomy[[as.character(i)]][taxonomy$Phylum==i]=1
taxonomy[[as.character(i)]][!taxonomy$Phylum==i]=0
}
Constrains=taxonomy[,c("Bacteria",as.character(Phylum))] #keep only the constrains
head(Constrains)
#'
#' Convert to fasta file
#'
## ---- message=FALSE------------------------------------------------------
sequences=list()
for (i in 1:dim(Constrains)[1]){sequences[[i]]=Constrains[i,]}
write.fasta(sequences, names=rownames(Constrains), file.out="My_outputs/Phylogenetic_Constrains.fasta", open = "w", nbchar = 60, as.string = FALSE)
#'
#' Prune the alignment to sequences with assigned domains
#'
## ---- message=FALSE------------------------------------------------------
alignment=alignment[rownames(Constrains)]
write.fasta(alignment, names=names(alignment), file.out="My_outputs/Saanich.final.opti_mcc.unique_list.0.03.rep_Names_Modified.fasta", open = "w", nbchar = 60, as.string = FALSE)
#'
#'
#' #### FastTree
#'
#' Now we are going to use the alignment of the reads to construct a phylogenetic tree of the reads.
#'
#' To do so we are going to use the FastTree software, that you should already have installed on your computer.
#'
#' On mac, you need to open a terminal and acces the software commands where it is located (in my computer here: "Desktop/Programmes_Unix/FastTree")
#'
#' The FastTree function requires input on (1) the model used (here gtr + cat 20), (2) the evenutal topological constrains (hre the file "Phylogenetic_Constrains.fasta" we produces before in R), (3) the alignment (here "Saanich.final.opti_mcc.unique_list.0.03.rep_Names_Modified.fasta") and a name for the output tree (here we used "Saanish_FastTree"). You need to give the exact adress of the different files in the command line  (here my files are loacted in "Desktop/Recherche/En_cours/workshopMicrobiome/Contenu/MyFiles/"). For further help on the the funciton, you can type:
#'
## ---- message=FALSE------------------------------------------------------
#Desktop/Programmes_Unix/FastTree -h
#'
#' Now we run fastTree on our data:
#'
## ---- message=FALSE------------------------------------------------------
#Desktop/Programmes_Unix/FastTree -gtr -cat 20 -constraints Desktop/Recherche/En_cours/workshopMicrobiome/Contenu/MyFiles/Phylogenetic_Constrains.fasta -nt Desktop/Recherche/En_cours/workshopMicrobiome/Contenu/MyFiles/Saanich.final.opti_mcc.unique_list.0.03.rep_Names_Modified.fasta > Desktop/Recherche/En_cours/workshopMicrobiome/Contenu/MyFiles/Saanish_FastTree
#'
#' For the sake of comparison, we will laso construct the tree WITHOUT topological constrains. In this case just remove the parameters "constrains"
#'
## ---- message=FALSE------------------------------------------------------
#Desktop/Programmes_Unix/FastTree -gtr -cat 20 -nt Desktop/Recherche/En_cours/workshopMicrobiome/Contenu/MyFiles/Saanich.final.opti_mcc.unique_list.0.03.rep_Names_Modified.fasta > Desktop/Recherche/En_cours/workshopMicrobiome/Contenu/MyFiles/Saanish_FastTree_withoutConstrains
#'
#' ### 3.3. Tree Visualisation <a name="Tree-Visualisation"></a>
#'
#' We now are coming back to R. We first need to load the trees we just constructed
#'
## ---- message=FALSE------------------------------------------------------
Tree=read.tree('My_outputs/Saanish_FastTree')
TreeNoC=read.tree('My_outputs/Saanish_FastTree_withoutConstrains')
Tree
#'
#' We can now plot the tree, with colours for Domains. First creating a palette of colours for the Domains and assign each OTU a color based on that.
#'
## ---- message=FALSE------------------------------------------------------
Domains=unique(taxonomy$Domain)
paletteDomains=rainbow(length(Domains));names(paletteDomains)=Domains
coloursDomains=paletteDomains[as.character(taxonomy$Domain)];names(coloursDomains)=rownames(taxonomy)
#'
#' Then plot and write the tree in pdf format.
#'
## ---- message=FALSE------------------------------------------------------
pdf("My_outputs/Phylogenetic_tree_colouredby_Domains.pdf",width=15,height=15)
plot(Tree,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
legend(1, 0, legend=names(paletteDomains),fill=paletteDomains, cex=2)
dev.off()
#'
#' We can do the same for phylum instead of domain.
#'
## ---- message=FALSE------------------------------------------------------
Phylums=unique(taxonomy$Phylum)
palettePhylums=rainbow(length(Phylums));names(palettePhylums)=Phylums #define colours for taxonomic groups (Phylums here)
coloursPhylums=palettePhylums[as.character(taxonomy$Phylum)];names(coloursPhylums)=rownames(taxonomy) #assign colors to each OTU depending on its taxonomic group
pdf("My_outputs/Phylogenetic_tree_colouredby_Phylum_with_Constrains.pdf",width=15,height=15)
plot(Tree,type="fan",cex=.3,tip.color=coloursPhylums[Tree$tip.label])
legend(1, 1, legend=names(palettePhylums),fill=palettePhylums, cex=1)
dev.off()
#'
#' It would be now interesting to check the impact of the topological contrains on the trees. To do so, we simply plot the tree obtained without constrains and observe the distribution of phylum in this tree.
#'
## ---- message=FALSE------------------------------------------------------
pdf("My_outputs/Phylogenetic_tree_colouredby_Phylum_NoConstrains.pdf",width=15,height=15)
plot(TreeNoC,type="fan",cex=.3,tip.color=coloursPhylums[TreeNoC$tip.label])
legend(1, 1, legend=names(palettePhylums),fill=palettePhylums, cex=1)
dev.off()
#'
#' Rapidly compare the two trees, what do you observe?
#'
#' ### 3.3. Re-root the tree (Archaea Vs Bacteria) <a name="Tree-Rerooting"></a>
#'
#' A phylogenetic tree is characterized by a root, which indicate the direction of evolution (from the root to the tip). For "prokariotes", we will assume to be on the branch separating bacteria from archaea.
#'
#' To do so, we first need to find this branch
#'
## ---- message=FALSE------------------------------------------------------
Archaea=row.names(taxonomy)[taxonomy$Domain=="Archaea"]
MRCAnode=getMRCA(phy = Tree,tip = Archaea)
TreeNewRoot=root(phy=Tree, node=MRCAnode,resolve.root = T)
#'
#' and write the corresponding tree
#'
## ---- message=FALSE------------------------------------------------------
write.tree(TreeNewRoot,'My_outputs/Saanish_FastTreeRooted')
#'
#' We finally plot this tree and save the image.
#'
## ---- message=FALSE------------------------------------------------------
pdf("My_outputs/Phylogenetic_tree_colouredby_Domains_NewRoot.pdf",width=15,height=15)
plot(TreeNewRoot,type="fan",cex=.3,tip.color=coloursDomains[Tree$tip.label])
legend(1, 0, legend=names(paletteDomains),fill=paletteDomains, cex=2)
dev.off()
#'
#' We now have a better tree. And we are going to use it to document microbiome composition patterns!
#'
#' ## 4. Diversity analysis in R <a name="Diversity-analysis-in-R"></a>
#'
#' ### 4.1. Basics <a name="Basics"></a>
#'
#' Importing the data: OTU table, metadata and phylogenetic tree
#'
#' The tree:
## ---- message=FALSE------------------------------------------------------
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
#'
#' The OTU table:
## ---- message=FALSE------------------------------------------------------
OTU = read.table("data/Saanich_cruise72_mothur_OTU_table.shared", sep="\t", header=TRUE, row.names=2)
OTU.clean = OTU %>%
select(-label, -numOtus)
#'
#' The taxonomic file:
## ---- message=FALSE------------------------------------------------------
taxonomy = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy.clean = taxonomy %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
#'
#' The metadata:
## ---- message=FALSE------------------------------------------------------
metadata = read.table("data/Saanich_cruise72_metadata.txt", sep="\t", header=TRUE, row.names=1)
metadata=metadata[,c("Depth_m","PO4_uM","SiO2_uM","NO3_uM","NH4_uM","CH4_nM" ,"Salinity_PSU")]
head(metadata)
#'
OTU.clean.physeq = otu_table(as.matrix(OTU.clean), taxa_are_rows=FALSE)
tax.clean.physeq = tax_table(as.matrix(taxonomy.clean))
metadata.physeq = sample_data(metadata)
phylogeny.physeq=phy_tree(Tree)
#'
#' and then assemble them
#'
## ---- message=FALSE------------------------------------------------------
saanish = phyloseq(OTU.clean.physeq, tax.clean.physeq, metadata.physeq,phylogeny.physeq)
saanish
BC=vegdist(otu_table(saanish),method = "bray")
Jaccard=vegdist(otu_table(saanish),method = "jac")
UniFracBeta=UniFrac(saanish)
plot(Jaccard,UniFracBeta)
ordi = ordinate(saanish, "PCoA", "unifrac", weighted=F)
plot_ordination(saanish, ordi, color="Depth_m")
ordi = ordinate(saanish, "PCoA", "bray", weighted=F)
?ordinate
saanish
ordi = phyloseq::ordinate(saanish, "PCoA", "bray", weighted=F)
?ordinate
ordi = ordinate(saanish, "PCoA", distance=BC, weighted=F)
plot_ordination(saanish, ordi, color="Depth_m")
ordi = ordinate(saanish, "PCoA", distance=UniFracBeta, weighted=F)
plot_ordination(saanish, ordi, color="Depth_m")
adonis(BC~Depth_m,data=data.frame(sample_data(saanish)))
adonis(Jaccard~Depth_m,data=data.frame(sample_data(saanish)))
adonis(UniFracBeta~Depth_m,data=data.frame(sample_data(saanish)))
adonis(UniFracBeta~Depth_m+NO3_uM,data=data.frame(sample_data(saanish)))
adonis(Jaccard~NO3_uM,data=data.frame(sample_data(saanish)))
adonis(UniFracBeta~NO3_uM,data=data.frame(sample_data(saanish)))
## ---- message=FALSE------------------------------------------------------
Hnodes=getHnodes(Tree)
hist(Hnodes,n=150,xlim=c(0,.5))
#'
#' We can then define the set of discrete threshold used to build different set of microbial OTUs
#'
## ---- message=FALSE------------------------------------------------------
slices=c(seq(from=0,to=0.3,by=0.025))
#'
#' The idea the is to compute beta-doversity matrices for all these slices:
#'
#' We first extract a OTU table matrix from the phyloseq object
## ---- message=FALSE------------------------------------------------------
mat=t(as(otu_table(saanish), "matrix"))
#'
slices=c(seq(from=0,to=0.3,by=0.025))
mat=t(as(otu_table(saanish), "matrix"))
MultipleBetaJac=BDTT(similarity_slices=slices,tree=Tree,sampleOTUs=mat,onlyBeta=T,metric="jac")
MultipleBetaJac=BDTT(similarity_slices=slices,tree=Tree,sampleOTUs=mat,onlyBeta=T,metric="jac")
class(MultipleBetaJac)
dim(MultipleBetaJac)
MultipleBetaJac
saveRDS(MultipleBetaJac,"My_outputs/Multiple_Resolution_Beta_Jaccard.RDS")
MultipleBetaBC=readRDS("My_outputsBackUp/Multiple_Resolution_Beta_BrayCurtis.RDS")
getwd()
list.files()
list.files("My_outputsBackUp/")
list.files("/My_outputsBackUp/")
MultipleBetaBC=readRDS("My_outputs_BackUp/Multiple_Resolution_Beta_BrayCurtis.RDS")
predictors=names(sample_data(saanish))
StatsRes=expand.grid(similarity_slices=as.character(slices),predictors=predictors,metric=c("Jac","BC"))
StatsRes[["F.Model"]]=StatsRes[["R2"]]=StatsRes[["Pr(>F)"]]=NA
head(StatsRes)
for (i in as.character(slices))
{
for (j in predictors)
{
res=unlist(adonis(formula = MultipleBetaJac[i,,]~data.frame(sample_data(saanish))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="Jac")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),4:6]=res
res=unlist(adonis(formula = MultipleBetaBC[i,,]~data.frame(sample_data(saanish))[,j])$aov.tab[1,c(4,5,6)])
StatsRes[(StatsRes$metric=="BC")&(StatsRes$predictors==j)&(StatsRes$similarity_slices==i),4:6]=res
}
}
a
ggplot(aes(y=R2,x=similarity_slices,colour=predictors,group=factor(predictors)),data=StatsRes)+geom_point()+geom_line()+facet_wrap(~metric)
ggsave("My_outputs/BDTT_Jaccard_BC.pdf",height = 7,width = 13)
Tree=read.tree('My_outputs/Saanish_FastTreeRooted')
OTU = read.table("data/Saanich_cruise72_mothur_OTU_table.shared", sep="\t", header=TRUE, row.names=2)
OTU.clean = OTU %>%
select(-label, -numOtus)
OTU.matrix <- as.matrix(t(OTU.clean))
OTU.matrix <- OTU.matrix[row.names(OTU.matrix) %in% Tree$tip.label,]
taxonomy = read.table("data/Saanich_cruise72_mothur_OTU_taxonomy.taxonomy", sep="\t", header=TRUE, row.names=1)
taxonomy.clean = taxonomy %>%
select(-Size) %>%
separate(Taxonomy, c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep=";")
taxonomy <- taxonomy %>% select(-Size)
taxonomy$OTU_ID = row.names(taxonomy)
taxonomy <- taxonomy[Tree$tip.label, c('OTU_ID','Taxonomy')]
taxonomy[,2] <- as.character(taxonomy[,2])
metadata = read.table("data/Saanich_cruise72_metadata.txt", sep="\t", header=TRUE, row.names=1)
metadata=metadata[,c("Depth_m","PO4_uM","SiO2_uM","NO3_uM","NH4_uM","CH4_nM" ,"Salinity_PSU")]
metadata <- metadata[colnames(OTU.matrix),]
set.seed(1)
CellDiam <- rlnorm(length(Tree$tip.label))
arcobacter <- Tree$tip.label %in% row.names(taxonomy.clean[taxonomy.clean$Genus == 'Arcobacter',])
actinobacteria <- (Tree$tip.label %in% row.names(taxonomy.clean[taxonomy.clean$Phylum == 'Actinobacteria',]))
CellDiam[arcobacter] <- rlnorm(sum(arcobacter))*4
CellDiam[actinobacteria] <- rlnorm(sum(actinobacteria))/4
logCellDiam <- log(CellDiam)
pf_twoSample <- twoSampleFactor(logCellDiam, Tree, nfactors=5)
pf_twoSample
print(sum(actinobacteria))
print(sum(arcobacter))
pf_twoSample$pvals
cellDiam.tree <- pf.tree(pf_twoSample)
cellDiam.tree$ggplot
purl("Workflow.Rmd", output = "Pure_Rscript.R", documentation = 2)
